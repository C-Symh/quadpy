# -*- coding: utf-8 -*-
#
from .helpers import _s31, _s22, _s211, _s1111

import numpy


class ZhangCuiLiu(object):
    '''
    Linbo Zhang, Tao Cui and Hui Liu,
    A set of symmetric quadrature rules on triangles and tetrahedra,
    Journal of Computational Mathematics
    Vol. 27, No. 1 (January 2009), pp. 89-96,
    <http://www.jstor.org/stable/43693493>.

    Abstract:
    We present a program for computing symmetric quadrature rules on triangles
    and tetrahedra. A set of rules are obtained by using this program.
    Quadrature rules up to order 21 on triangles and up to order 14 on
    tetrahedra have been obtained which are useful for use in finite element
    computations. All rules presented here have positive weights with points
    lying within the integration domain.
    '''
    def __init__(self, index):
        if index == 1:
            self.weights = numpy.concatenate([
                0.0063971477799023213214514203351730 * numpy.ones(4),
                0.0401904480209661724881611584798178 * numpy.ones(4),
                0.0243079755047703211748691087719226 * numpy.ones(4),
                0.0548588924136974404669241239903914 * numpy.ones(4),
                0.0357196122340991824649509689966176 * numpy.ones(6),
                0.0071831906978525394094511052198038 * numpy.ones(12),
                0.0163721819453191175409381397561191 * numpy.ones(12),
                ])
            bary = numpy.concatenate([
                _s31(.0396754230703899012650713295393895),
                _s31(.3144878006980963137841605626971483),
                _s31(.1019866930627033000000000000000000),
                _s31(.1842036969491915122759464173489092),
                _s22(.0634362877545398924051412387018983),
                _s211(
                    .0216901620677280048026624826249302,
                    .7199319220394659358894349533527348
                    ),
                _s211(
                    .2044800806367957142413355748727453,
                    .5805771901288092241753981713906204
                    ),
                ])
            self.degree = 8
        else:
            assert index == 2
            self.weights = numpy.concatenate([
                .0040651136652707670436208836835636 * numpy.ones(4),
                .0022145385334455781437599569500071 * numpy.ones(4),
                .0058134382678884505495373338821455 * numpy.ones(4),
                .0196255433858357215975623333961715 * numpy.ones(4),
                .0003875737905908214364538721248394 * numpy.ones(4),
                .0116429719721770369855213401005552 * numpy.ones(12),
                .0052890429882817131317736883052856 * numpy.ones(12),
                .0018310854163600559376697823488069 * numpy.ones(12),
                .0082496473772146452067449669173660 * numpy.ones(12),
                .0030099245347082451376888748208987 * numpy.ones(24),
                .0008047165617367534636261808760312 * numpy.ones(24),
                .0029850412588493071187655692883922 * numpy.ones(24),
                .0056896002418760766963361477811973 * numpy.ones(24),
                .0041590865878545715670013980182613 * numpy.ones(24),
                .0007282389204572724356136429745654 * numpy.ones(24),
                .0054326500769958248216242340651926 * numpy.ones(24),
                ])
            bary = numpy.concatenate([
                _s31(.3272533625238485639093096692685289),
                _s31(.0447613044666850808837942096478842),
                _s31(.0861403311024363536537208740298857),
                _s31(.2087626425004322968265357083976176),
                _s31(.0141049738029209600635879152102928),
                _s211(
                    .1021653241807768123476692526982584,
                    .5739463675943338202814002893460107
                    ),
                _s211(
                    .4075700516600107157213295651301783,
                    .0922278701390201300000000000000000
                    ),
                _s211(
                    .0156640007402803585557586709578084,
                    .7012810959589440327139967673208426
                    ),
                _s211(
                    .2254963562525029053780724154201103,
                    .4769063974420887115860583354107011
                    ),
                _s1111(
                    .3905984281281458000000000000000000,
                    .2013590544123922168123077327235092,
                    .0161122880710300298578026931548371
                    ),
                _s1111(
                    .1061350679989021455556139029848079,
                    .0327358186817269284944004077912660,
                    .0035979076537271666907971523385925
                    ),
                _s1111(
                    .5636383731697743896896816630648502,
                    .2302920722300657454502526874135652,
                    .1907199341743551862712487790637898
                    ),
                _s1111(
                    .3676255095325860844092206775991167,
                    .2078851380230044950717102125250735,
                    .3312104885193449000000000000000000
                    ),
                _s1111(
                    .7192323689817295295023401840796991,
                    .1763279118019329762157993033636973,
                    .0207602362571310090754973440611644
                    ),
                _s1111(
                    .5278249952152987298409240075817276,
                    .4372890892203418165526238760841918,
                    .0092201651856641949463177554949220
                    ),
                _s1111(
                    .5483674544948190728994910505607746,
                    .3447815506171641228703671870920331,
                    .0867217283322215394629438740085828
                    ),
                ])
            self.degree = 14

        self.points = bary[:, [1, 2, 3]]
        return
