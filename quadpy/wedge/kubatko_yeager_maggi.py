# -*- coding: utf-8 -*-
#
from __future__ import division

import numpy
import sympy

from ..helpers import untangle


class KubatkoYeagerMaggi(object):
    """
    Ethan J. Kubatko, Benjamin A. Yeager, Ashley L. Maggi,
    New computationally efficient quadrature formulas for triangular prism elements,
    Computers & Fluids 73 (2013) 187â€“201,
    <https://doi.org/10.1016/j.compfluid.2013.01.002>.
    """

    def __init__(self, index):
        symbolic = False
        frac = sympy.Rational if symbolic else lambda x, y: x / y
        sqrt = numpy.vectorize(sympy.sqrt) if symbolic else numpy.sqrt

        if index == "1":
            self.degree = 1
            data = [(4, [[-frac(1, 3), -frac(1, 3), 0]])]
        elif index == "2a":
            self.degree = 2
            data = [
                (1, [[0.483163247594393, -0.741581623797196, 0]]),
                (1, [[-0.605498860309242, 0.469416096821288, 0]]),
                (
                    1,
                    _zeta_pm(-0.605498860309242, -0.530583903178712, 0.816496580927726),
                ),
            ]
        elif index == "2b":
            self.degree = 2
            data = [(frac(1, 3), _s21(-1)), (frac(3, 2), _s3_z(frac(2, 3), symbolic))]
        elif index == "3a":
            self.degree = 3
            data = [
                (
                    0.742534890852309,
                    [[0.240692796349625, -0.771991660873412, 0.614747128207527]],
                ),
                (
                    0.375143463443327,
                    [[-0.968326281451138, -0.568046512457875, 0.676689529541421]],
                ),
                (
                    0.495419047908462,
                    [[0.467917833640195, -0.549342790168347, -0.599905857322635]],
                ),
                (
                    0.523999970843238,
                    [[-0.786144119530819, 0.362655041695561, -0.677609795694786]],
                ),
                (
                    0.980905839025611,
                    [[-0.484844897886675, -0.707931130717342, -0.502482717716373]],
                ),
                (
                    0.881996787927053,
                    [[-0.559053711932125, 0.260243325246813, 0.493010512161538]],
                ),
            ]
        elif index == "3b":
            self.degree = 3
            data = [
                (-frac(43, 12), _s3(symbolic)),
                (frac(25, 12), _s21(-frac(3, 5))),
                (frac(2, 3), _s3_z(1, symbolic)),
            ]
        elif index == "3c":
            self.degree = 3
            alpha = 4 * sqrt(3) / 15
            data = [
                (-frac(9, 4), _s3(symbolic)),
                (frac(25, 24), _s21_z(-frac(3, 5), alpha)),
            ]
        elif index == "3d":
            self.degree = 3
            alpha = -0.525248027124695
            beta = -0.924672547414225
            gamma = 0.449920574538920
            data = [
                (
                    frac(4, 9),
                    _s30(-0.525248027124695, -0.924672547414225, 0.449920574538920),
                ),
                (frac(2, 3), _s3_z(1, symbolic)),
            ]
        elif index == "4a":
            self.degree = 4
            data = [
                (
                    0.111155943811228,
                    [[0.812075900047562, -0.986242751499303, 0.850716248413834]],
                ),
                (
                    0.309060899887509,
                    [[-0.792166223585545, 0.687201105597868, -0.115214772515700]],
                ),
                (
                    0.516646862442958,
                    [[-0.756726179789306, -0.731311840596107, -0.451491675441927]],
                ),
                (
                    0.567975205132714,
                    [[-0.552495167978340, 0.015073398439985, -0.824457000064439]],
                ),
                (
                    0.382742555939017,
                    [[-0.357230019521233, 0.126888850505978, 0.855349689995606]],
                ),
                (
                    0.355960928492268,
                    [[-0.987225392999058, 0.082647545710800, 0.452976444667786]],
                ),
                (
                    0.108183228294342,
                    [[-0.816603728785918, -0.915066171481315, 0.997939285245240]],
                ),
                (
                    0.126355242780924,
                    [[0.423489172633859, -1.112801167237130, -0.963298774205756]],
                ),
                (
                    0.587370828592853,
                    [[0.363041084609230, -0.499011410082669, -0.299892769705443]],
                ),
                (
                    0.934548304626188,
                    [[-0.175780343149613, -0.654971142379686, 0.367947041936472]],
                ),
            ]
        elif index == "4b":
            self.degree = 4
            data = [
                (0.545658450421913, _s21(-0.062688380276010)),
                (0.431647899262139, _s3_z(0.866861974009030, symbolic)),
                (0.249954808368331, _s21_z(-0.798519188402179, 0.675639823682265)),
            ]
        elif index == "5a":
            self.degree = 5
            data = [
                (
                    0.087576186678730,
                    [[-0.955901336867574, -0.955901336867577, 0.000000000000286]],
                ),
                (
                    0.229447629454892,
                    _abz(-0.051621305926029, -1.017063354038640, 0.000000000000038),
                ),
                (
                    0.833056798542985,
                    [[-0.297388746460523, -0.297388746460521, 0.000000000000008]],
                ),
                (
                    0.166443428304729,
                    _abz(0.774849157169622, -0.849021640062096, 0.000000000000080),
                ),
                (0.376993270712316, _az(-0.665292008657551, 0.756615409654429)),
                (0.170410864470884, _az(-0.012171148087349, 0.600149379161583)),
                (
                    0.298194157223163,
                    _abz_pm(-0.734122164680096, 0.334122164680066, 0.808115770496521),
                ),
            ]
        elif index == "5b":
            self.degree = 5
            data = [
                (
                    0.213895020288765,
                    [[-0.820754415297359, 0.701020947925133, -0.300763696502910]],
                ),
                (
                    0.141917375616806,
                    [[0.611831616907812, -0.869995576950389, 0.348546607420888]],
                ),
                (
                    0.295568859378071,
                    [[-0.951379065092975, -0.087091980055873, 0.150656042323906]],
                ),
                (
                    0.256991945593379,
                    [[0.200535109198601, -0.783721735474016, -0.844285153176719]],
                ),
                (
                    0.122121979248381,
                    [[-0.909622841605196, -0.890218158063352, 0.477120081549168]],
                ),
                (
                    0.175194917962627,
                    [[0.411514133287729, -0.725374126531787, 0.864653509536562]],
                ),
                (
                    0.284969106392719,
                    [[-0.127534496411879, -0.953467283619037, 0.216019762875977]],
                ),
                (
                    0.323336131783334,
                    [[-0.555217727817199, -0.530472194607007, 0.873409672725819]],
                ),
                (
                    0.159056110329063,
                    [[0.706942532529193, -0.782248553944540, -0.390653804976705]],
                ),
                (
                    0.748067388709644,
                    [[-0.278092963133809, -0.291936530517119, -0.126030507204870]],
                ),
                (
                    0.280551223607231,
                    [[-0.057824844208300, -0.056757587543798, 0.539907869785112]],
                ),
                (
                    0.147734016552639,
                    [[-0.043308436222116, 0.012890722780611, -0.776314479909204]],
                ),
                (
                    0.259874920383688,
                    [[-0.774478920734726, 0.476188541042454, 0.745875967497062]],
                ),
                (
                    0.235144061421191,
                    [[-0.765638443571458, 0.177195164202219, -0.888355356215127]],
                ),
                (
                    0.355576942732463,
                    [[-0.732830649614460, -0.737447982744191, -0.651653242952189]],
                ),
            ]
        elif index == "5c":
            self.degree = 5
            data = [
                (0.711455555931488, _s3(symbolic)),
                (0.224710067228267, _s21(-0.025400070899509)),
                (0.185661421316158, _s21_z(-0.108803790659256, 0.871002934865444)),
                (0.250074285747794, _s21_z(-0.798282108034583, 0.570426980705159)),
            ]
        elif index == "6a":
            self.degree = 6
            data = [
                (
                    0.168480079940386,
                    _s30(0.513019949700545, -0.930094391938207, -0.582925557762337),
                ),
                (0.000079282874851, _s21(-1.830988812620400)),
                (0.544286440652304, _s3(symbolic)),
                (0.026293733850586, _s3_z(1.250521622121900, symbolic)),
                (0.283472344926041, _s21_z(-0.098283514203544, 0.685008566774710)),
                (0.115195615637235, _s21_z(-0.812603471654584, 0.809574716992997)),
            ]
        elif index == "6b":
            self.degree = 6
            data = [
                (-0.515987215963885, _s3(symbolic)),
                (0.113384887025471, _s21(-0.891966687066689)),
                (0.489402517688430, _s21(-0.489005016481638)),
                (0.205362200002623, _s3_z(0.932807703184800, symbolic)),
                (0.048821553028563, _s21_z(-0.838683160291348, -0.946297575072789)),
                (
                    0.166997606970463,
                    _s111_z(-0.892665383041055, -0.380071023770412, 0.596750920257972),
                ),
            ]
        elif index == "6c":
            self.degree = 6
            data = [
                (0.108764249640922, _s21(-0.895512822481133)),
                (
                    0.162544166564880,
                    _s30(-0.603390269052889, -0.458729487713671, +0.062119756766560),
                ),
                (0.201100563750029, _s3_z(0.936241512371697, symbolic)),
                (0.047097659849389, _s21_z(-0.841699897299232, 0.948681147283254)),
                (
                    0.167804597090964,
                    _s111_z(-0.890337410253393, -0.382973596286234, 0.600638052820557),
                ),
            ]
        else:
            assert False

        self.points, self.weights = untangle(data)
        # quadpy's reference wedge is 0 <= X, 0 <= Y, X + Y <= 1, -1 <= Z <= 1.
        self.weights = self.weights / 4
        self.points[:, :2] += 1
        self.points[:, :2] /= 2
        return


def _zeta_pm(xi, eta, zeta):
    return [[xi, eta, +zeta], [xi, eta, -zeta]]


def _abz(a, b, z):
    return [[a, b, z], [b, a, z]]


def _abz_pm(a, b, z):
    return [[a, b, z], [a, b, -z], [b, a, z], [b, a, -z]]


def _az(a, z):
    return [[a, a, +z], [a, a, -z]]


def _s3(symbolic):
    frac = sympy.Rational if symbolic else lambda x, y: x / y
    return [[-frac(1, 3), -frac(1, 3), 0]]


def _s3_z(z, symbolic):
    frac = sympy.Rational if symbolic else lambda x, y: x / y
    return [[-frac(1, 3), -frac(1, 3), +z], [-frac(1, 3), -frac(1, 3), -z]]


def _s21(a):
    b = -(1 + 2 * a)
    return [[a, b, 0], [b, a, 0], [a, a, 0]]


def _s21_z(a, z):
    b = -(1 + 2 * a)
    return [[a, b, +z], [b, a, +z], [a, a, +z], [a, b, -z], [b, a, -z], [a, a, -z]]


def _s30(a, b, c):
    return [[a, b, 0], [b, a, 0], [a, c, 0], [c, a, 0], [b, c, 0], [c, b, 0]]


def _s111_z(a, b, z):
    c = -(1 + a + b)
    return [
        [b, c, +z],
        [a, b, +z],
        [c, a, +z],
        [c, b, +z],
        [a, c, +z],
        [b, a, +z],
        [b, c, -z],
        [a, b, -z],
        [c, a, -z],
        [c, b, -z],
        [a, c, -z],
        [b, a, -z],
    ]
