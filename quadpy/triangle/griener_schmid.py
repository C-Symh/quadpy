# -*- coding: utf-8 -*-
#
from __future__ import division

import numpy


class GrienerSchmid(object):
    """
    Bernhard Griener, Hans Joachim Schmid,
    An interactive tool to visualize common zeros of two-dimensional polynomials,
    Journal of Computational and Applied Mathematics 112 (1999) 83-94,
    <https://doi.org/10.1016/S0377-0427(99)00215-0>.
    """

    def __init__(self, index):
        self.name = "GrienerSchmid({})".format(index)

        if index == 1:
            # According to the article, this scheme appeared earlier in
            #
            # G.G. Rasputin,
            # Construction of cubature formulas containing prespecied knots,
            # Metody Vychisl. 13 (1983) 122 â€“ 129 (in Russian).
            self.degree = 6
            self.points = numpy.array(
                [
                    [1.28867990757340236072, -0.00879199714420631034],
                    [-0.00879199714420631034, 1.28867990757340236072],
                    [0.78822920956686404839, 0.06468880605601090940],
                    [0.06468880605601090940, 0.78822920956686404839],
                    [0.40172877323475981682, 0.07682571684908210504],
                    [0.07682571684908210504, 0.40172877323475981682],
                    [0.64933214716985020413, 0.29502511936941515372],
                    [0.29502511936941515372, 0.64933214716985020413],
                    [0.08533316117031069729, 0.08533316117031069729],
                    [0.35369054666996447962, 0.35369054666996447962],
                ]
            )
            self.weights = numpy.array(
                [
                    0.00051542875928455448,
                    0.00051542875928455448,
                    0.10479531313284680990,
                    0.10479531313284680990,
                    0.14855110930104331913,
                    0.14855110930104331913,
                    0.09497723917756742321,
                    0.09497723917756742321,
                    0.09099352359044946853,
                    0.21132829566806631803,
                ]
            )
        else:
            assert index == 2
            self.degree = 6
            self.points = numpy.array(
                [
                    [0.62261842170067743793, 0.29681206443213099158],
                    [0.29681206443213099158, 0.62261842170067743793],
                    [0.86560137104657306697, 0.05848274947077690073],
                    [0.05848274947077690073, 0.86560137104657306697],
                    [0.30783381768828903704, 0.30783381768828903704],
                    [0.56391552905457826463, 0.06887470996336075494],
                    [0.06887470996336075494, 0.56391552905457826463],
                    [-0.17255363572833024944, -0.17255363572833024944],
                    [0.19794325221245567307, 0.04812894161425963489],
                    [0.04812894161425963481, 0.19794325221245567307],
                ]
            )
            self.weights = numpy.array(
                [
                    0.12493284637910931301,
                    0.12493284637910931301,
                    0.05736898913621279825,
                    0.05736898913621279825,
                    0.21037615383745954659,
                    0.12547963681681714946,
                    0.12547963681681714946,
                    0.00042783665681296109,
                    0.08681653242072448544,
                    0.08681653242072448544,
                ]
            )

        self.bary = numpy.array(
            [self.points[:, 0], self.points[:, 1], 1 - numpy.sum(self.points, axis=1)]
        ).T
        return
