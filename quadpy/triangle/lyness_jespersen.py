# -*- coding: utf-8 -*-
#
from sympy import Rational as fr, sqrt

from .helpers import _s3, _s21, _s111
from ..helpers import untangle


class LynessJespersen(object):
    '''
    J.N. Lyness, D. Jespersen,
    Moderate Degree Symmetric Quadrature Rules for the Triangle,
    J. Inst. Maths Applies (1975) 15, 19-32,
    doi: 10.1093/imamat/15.1.19,
    <https://doi.org/10.1093/imamat/15.1.19>.

    Abstract:
    A variant formulation of the moment fitting equations for the construction
    of D3 (triangularly symmetric) quadrature rules for the triangle is
    derived. These equations are solved to produce weights and abscissas for
    quadrature rules of polynomial degree up to 11 for the triangle, some of
    which require fewer function evaluations than any presently available rule
    of the same polynomial degree. Cytolic rules of degrees up to 9 are also
    derived.
    '''
    def __init__(self, index):
        self.name = 'LJ(%d)' % index
        if index == 1:
            self.degree = 2
            data = [
                (fr(1, 3), _s21(fr(1, 2))),
                ]
        elif index == 2:
            self.degree = 2
            data = [
                (fr(3, 4), _s3()),
                (fr(1, 12), _s21(0)),
                ]
        elif index == 3:
            self.degree = 3
            data = [
                (-fr(9, 16), _s3()),
                (fr(25, 48), _s21(fr(1, 5))),
                ]
        elif index == 4:
            self.degree = 3
            data = [
                (fr(9, 20), _s3()),
                (fr(1, 20), _s21(0)),
                (fr(2, 15), _s21(fr(1, 2))),
                ]
        elif index == 5:
            self.degree = 4
            data = [
                (3.298552309659655E-01 / 3, _s21(9.157621350977073E-02)),
                (6.701447690340345E-01 / 3, _s21(4.459484909159649E-01)),
                ]
        elif index == 6:
            self.degree = 4
            a0, a1 = [(3 + i*sqrt(3)) / 6 for i in [+1, -1]]
            data = [
                (+fr(9, 20), _s3()),
                (-fr(1, 60), _s21(0)),
                (+fr(1, 10), _s111(a0, a1)),
                ]
        elif index == 7:
            self.degree = 4
            sqrt13 = sqrt(13)
            data = [
                ((11 - sqrt13) / 360, _s21(0)),
                ((10 - 2*sqrt13) / 45, _s21(fr(1, 2))),
                ((29 + 17*sqrt13) / 360, _s21((7 - sqrt13) / 18)),
                ]
        elif index == 8:
            self.degree = 5
            sqrt15 = sqrt(15)
            a1, a2 = [(155 - i*sqrt15) / 1200 for i in [+1, -1]]
            r1, r2 = [(6 - i*sqrt15)/21 for i in [+1, -1]]
            data = [
                (fr(9, 40), _s3()),
                (a1, _s21(r1)),
                (a2, _s21(r2)),
                ]
        elif index == 9:
            self.degree = 5
            data = [
                (fr(81, 320), _s3()),
                (fr(1, 90), _s21(0)),
                (fr(16, 225), _s21(fr(1, 2))),
                (fr(2401, 14400), _s21(fr(1, 7))),
                ]
        elif index == 10:
            self.degree = 6
            data = [
                (3.503588271790222E-01 / 3.0, _s21(2.492867451709329E-01)),
                (1.525347191106164E-01 / 3.0, _s21(6.308901449150177E-02)),
                (4.971064537103375E-01 / 6.0, _s111(6.365024991213939E-01, 5.314504984483216E-02)),
                ]
        elif index == 11:
            self.degree = 6
            sqrt6 = sqrt(6)
            data = [
                (-fr(81, 140), _s3()),
                (-fr(5, 252), _s21(0)),
                (fr(17, 315), _s21(fr(1, 2))),
                (fr(128, 315), _s21(fr(1, 4))),
                (fr(9, 210), _s111((3 + sqrt6) / 6, (3 - sqrt6) / 6)),
                ]
        elif index == 12:
            self.degree = 6
            data = [
                (1.527089667883523E-01, _s3()),
                (2.944076042366762E-01/3.0, _s21(4.738308139536513E-01)),
                (3.887052878418766E-01/3.0, _s21(1.721176696308175E-01)),
                (1.641781411330949E-01/6.0, _s111(0.0, 8.653073540834571E-01)),
                ]
        elif index == 13:
            self.degree = 7
            data = [
                (-1.495700444677495E-01, _s3()),
                (5.268457722996328E-01 / 3.0, _s21(2.603459660790466E-01)),
                (1.600417068265167E-01 / 3.0, _s21(6.513010290221623E-02)),
                (4.626825653415500E-01 / 6.0, _s111(6.384441885698096E-01, 4.869031542531756E-02)),
                ]
        elif index == 14:
            self.degree = 7
            data = [
                (1.763126156005252E-01, _s3()),
                (1.210901532763310E-02/3.0, _s21(0.0)),
                (3.499561757697094E-01/3.0, _s21(1.549360602237604E-01)),
                (3.195119754425220E-01/3.0, _s21(4.691507461438120E-01)),
                (1.421102178595603E-01/6.0, _s111(0.0, 8.392991722729236E-01)),
                ]
        elif index == 15:
            self.degree = 8
            data = [
                (1.443156076777862E-01, _s3()),
                (2.852749028018549E-01/3.0, _s21(4.592925882927229E-01)),
                (9.737549286959440E-02/3.0, _s21(5.054722831703103E-02)),
                (3.096521116041552E-01/3.0, _s21(1.705693077517601E-01)),
                (1.633818850466092E-01/6.0, _s111(8.394777409957211E-03, 7.284923929554041E-01)),
                ]
        elif index == 16:
            self.degree = 8
            data = [
                (+1.207273935292775E-02/3.0, _s21(0.0)),
                (-8.491579879151455E-01/3.0, _s21(0.5)),
                (+1.042367468891334E+00/3.0, _s21(4.956813941755582E-01)),
                (+1.947229791412260E-01/3.0, _s21(9.032775751426533E-02)),
                (+4.511852767201322E-01/3.0, _s21(2.341547497073052E-01)),
                (+1.488095238055238E-01/6.0, _s111(0.0, 7.236067977499750E-01)),
                ]
        elif index == 17:
            self.degree = 8
            data = [
                (-2.834183851113958E-01, _s3()),
                (2.097208857979572E-01/3.0, _s21(4.766654393821525E-01)),
                (5.127273801480265E-02/3.0, _s21(3.377184405448033E-02)),
                (6.564896469913508E-01/3.0, _s21(2.703478891654040E-01)),
                (3.659351143072855E-01/6.0, _s111(5.146433548666149E-02, 7.458294907672514E-01)),
                ]
        elif index == 18:
            self.degree = 9
            data = [
                (9.713579628279610E-02, _s3()),
                (9.400410068141950E-02/3.0, _s21(4.896825191987370E-01)),
                (2.334826230143263E-01/3.0, _s21(4.370895914929355E-01)),
                (2.389432167816271E-01/3.0, _s21(1.882035356190322E-01)),
                (7.673302697609430E-02/3.0, _s21(4.472951339445297E-02)),
                (2.597012362637364E-01/6.0, _s111(3.683841205473626E-02, 7.411985987844980E-01)),
                ]
        elif index == 19:
            self.degree = 9
            data = [
                (1.133624844599192E-01, _s3()),
                (1.062573789846330E-03/3.0, _s21(0.0)),
                (4.803411513859279E-02/3.0, _s21(0.5)),
                (2.524243006337300E-01/3.0, _s21(4.497793381870162E-01)),
                (7.819254371487040E-02/3.0, _s21(4.694744319909033E-02)),
                (2.472227459993048E-01/3.0, _s21(1.918719127374489E-01)),
                (2.597012362637364E-01/6.0, _s111(3.683841205473626E-02, 7.411985987844980E-01)),
                ]
        elif index == 20:
            self.degree = 11
            data = [
                (4.097919300803106E-02/3.0, _s21(3.236494811127173E-02)),
                (1.085536215102866E-01/3.0, _s21(1.193509122825931E-01)),
                (2.781018986881812E-03/3.0, _s21(5.346110482707572E-01)),
                (1.779689321422668E-01/3.0, _s21(2.033099004312816E-01)),
                (2.314486047444677E-01/3.0, _s21(3.989693029658558E-01)),
                (3.140226717732234E-01/6.0, _s111(5.017813831049474E-02, 5.932012134282132E-01)),
                (1.242459578348437E-01/6.0, _s111(2.102201653616613E-02, 8.074890031597923E-01)),
                ]
        else:
            assert index == 21
            self.degree = 11
            data = [
                (8.797730116222190E-02, _s3()),
                (2.623293466120857E-02/3.0, _s21(2.598914092828833E-02)),
                (1.142447159818060E-01/3.0, _s21(9.428750264792270E-02)),
                (5.656634416839376E-02/3.0, _s21(4.946367750172147E-01)),
                (2.164790926342230E-01/3.0, _s21(2.073433826145142E-01)),
                (2.079874161166116E-01/3.0, _s21(4.389078057004907E-01)),
                (4.417430269980344E-02/6.0, _s111(0.0, 8.588702812826364E-01)),
                (2.463378925757316E-01/6.0, _s111(4.484167758913055E-02, 6.779376548825902E-01)),
                ]

        self.bary, self.weights = untangle(data)
        self.points = self.bary[:, 1:]
        return
