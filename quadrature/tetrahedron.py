# -*- coding: utf-8 -*-
#
import math
import numpy


def volume(tet):
    '''Computes the center of the circumsphere of
    '''
    a = tet[1, :] - tet[0, :]
    b = tet[2, :] - tet[0, :]
    c = tet[3, :] - tet[0, :]

    omega = numpy.dot(a, numpy.cross(b, c))

    # https://en.wikipedia.org/wiki/Tetrahedron#Volume
    cell_volumes = abs(omega) / 6.0
    return cell_volumes


def show(tet, scheme, ball_scale=1.0, alpha=0.3):
    '''Shows the quadrature points on a given tetrahedron. The size of the
    balls around the points coincides with their weights.
    '''
    from matplotlib import pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D

    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.set_aspect('equal')

    edges = numpy.array([
        [tet[0], tet[1]],
        [tet[0], tet[2]],
        [tet[0], tet[3]],
        [tet[1], tet[2]],
        [tet[1], tet[3]],
        [tet[2], tet[3]],
        ])
    for edge in edges:
        plt.plot(edge[:, 0], edge[:, 1], edge[:, 2], '-k')

    transformed_pts = \
        + numpy.outer(
            (1.0 - scheme.points[:, 0]
                 - scheme.points[:, 1]
                 - scheme.points[:, 2]),
            tet[0]
            ) \
        + numpy.outer(scheme.points[:, 0], tet[1]) \
        + numpy.outer(scheme.points[:, 1], tet[2]) \
        + numpy.outer(scheme.points[:, 2], tet[3])

    tet_vol = volume(tet)
    phi, theta = numpy.mgrid[0:numpy.pi:101j, 0:2*numpy.pi:101j]
    x = numpy.sin(phi)*numpy.cos(theta)
    y = numpy.sin(phi)*numpy.sin(theta)
    z = numpy.cos(phi)
    for tp, weight in zip(transformed_pts, scheme.weights):
        color = 'b' if weight >= 0 else 'r'
        # highlight ball center
        plt.plot([tp[0]], [tp[1]], [tp[2]], '.' + color)

        # plot ball
        # scale the circle volume according to the weight
        r = ball_scale \
            * (tet_vol * abs(weight) / (4.0/3.0 * numpy.pi))**(1.0/3.0)

        ax.plot_surface(
            r*x + tp[0], r*y + tp[1], r*z + tp[2],
            color=color,
            alpha=alpha,
            linewidth=0
            )

    # http://stackoverflow.com/a/21765085/353337
    alpha = 1.3
    max_range = alpha * 0.5 * numpy.array([
        tet[:, 0].max() - tet[:, 0].min(),
        tet[:, 1].max() - tet[:, 1].min(),
        tet[:, 2].max() - tet[:, 2].min(),
        ]).max()
    mid_x = 0.5 * (tet[:, 0].max() + tet[:, 0].min())
    mid_y = 0.5 * (tet[:, 1].max() + tet[:, 1].min())
    mid_z = 0.5 * (tet[:, 2].max() + tet[:, 2].min())
    ax.set_xlim(mid_x - max_range, mid_x + max_range)
    ax.set_ylim(mid_y - max_range, mid_y + max_range)
    ax.set_zlim(mid_z - max_range, mid_z + max_range)
    return


def _transform_to_unit_tetrahedron(f, tetrahedron):
    '''Transformation

      x = x0 * N0(xi, eta, zeta) \
        + x1 * N1(xi, eta, zeta) \
        + x2 * N2(xi, eta, zeta) \
        + x3 * N2(xi, eta, zeta)

    with

      N0(xi, eta) = 1 - xi - eta - zeta,
      N1(xi, eta) = xi,
      N2(xi, eta) = eta.
      N3(xi, eta) = zeta.
    '''
    return lambda xi: f(
        + tetrahedron[0] * (1.0 - xi[0] - xi[1] - xi[2])
        + tetrahedron[1] * xi[0]
        + tetrahedron[2] * xi[1]
        + tetrahedron[3] * xi[2]
        )


def integrate(f, tetrahedron, scheme):
    g = _transform_to_unit_tetrahedron(f, tetrahedron)
    out = math.fsum([
        weight * g(point)
        for point, weight in zip(scheme.points, scheme.weights)
        ])
    return volume(tetrahedron) * out


def _mix_1_3(a, b):
    return numpy.array([
        [a, b, b, b],
        [b, a, b, b],
        [b, b, a, b],
        [b, b, b, a],
        ])


def _mix_2_2(a, b):
    return numpy.array([
        [a, a, b, b],
        [a, b, a, b],
        [a, b, b, a],
        [b, a, a, b],
        [b, a, b, a],
        [b, b, a, a],
        ])


def _mix_1_1_2(a, b, c):
    return numpy.array([
        [a, b, c, c],
        [b, a, c, c],
        [a, c, b, c],
        [b, c, a, c],
        [a, c, c, b],
        [b, c, c, a],
        [c, a, c, b],
        [c, b, c, a],
        [c, c, a, b],
        [c, c, b, a],
        [c, a, b, c],
        [c, b, a, c],
        ])


class Keast(object):
    '''
    P. Keast,
    Moderate degree tetrahedral quadrature formulas,
    CMAME 55: 339-348
    (1986)

    Abstract:
    Quadrature formulas of degrees 4 to 8 for numerical integration over the
    tetrahedron are constructed. The formulas are fully symmetric with respect
    to the tetrahedron, and in some cases are the minimum point rules with this
    symmetry.

    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tet/quadrature_rules_tet.html
    '''
    def __init__(self, index):
        if index == 0:
            self.weights = numpy.array([
                1.0
                ])
            bary = numpy.array([
                [0.25, 0.25, 0.25, 0.25]
                ])
            self.degree = 1
        elif index == 1:
            self.weights = 0.25 * numpy.ones(4)
            bary = _mix_1_3(0.5854101966249685, 0.1381966011250105)
            self.degree = 2
        elif index == 2:
            self.weights = numpy.concatenate([
                -0.8 * numpy.ones(1),
                0.45 * numpy.ones(4),
                ])
            bary = numpy.concatenate([
                numpy.array([[0.25, 0.25, 0.25, 0.25]]),
                _mix_1_3(0.5, 1.0/6.0),
                ])
            self.degree = 3
        elif index == 3:
            self.weights = numpy.concatenate([
                0.2177650698804054 * numpy.ones(4),
                0.0214899534130631 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                _mix_1_3(0.5684305841968444, 0.1438564719343852),
                _mix_2_2(0.0, 0.5),
                ])
            self.degree = 3
        elif index == 4:
            self.weights = numpy.concatenate([
                -148.0 / 1875.0 * numpy.ones(1),
                343.0 / 7500.0 * numpy.ones(4),
                56.0 / 375.0 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[0.25, 0.25, 0.25, 0.25]]),
                _mix_1_3(11.0/14.0, 1.0/14.0),
                _mix_2_2(0.1005964238332008, 0.3994035761667992),
                ])
            self.degree = 4
        elif index == 5:
            self.weights = numpy.concatenate([
                2.0/105.0 * numpy.ones(6),
                0.0885898247429807 * numpy.ones(4),
                0.1328387466855907 * numpy.ones(4),
                ])
            bary = numpy.concatenate([
                _mix_2_2(0.0, 0.5),
                _mix_1_3(0.6984197043243866, 0.1005267652252045),
                _mix_1_3(0.0568813795204234, 0.3143728734931922),
                ])
            self.degree = 4
        elif index == 6:
            self.weights = numpy.concatenate([
                6544.0 / 36015.0 * numpy.ones(1),
                81.0 / 2240.0 * numpy.ones(4),
                161051.0 / 2304960.0 * numpy.ones(4),
                338.0 / 5145.0 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[0.25, 0.25, 0.25, 0.25]]),
                _mix_1_3(0.0, 1.0/3.0),
                _mix_1_3(8.0/11.0, 1.0/11.0),
                _mix_2_2(0.4334498464263357, 0.0665501535736643),
                ])
            self.degree = 5
        elif index == 7:
            self.weights = numpy.concatenate([
                0.0399227502581679 * numpy.ones(4),
                0.0100772110553207 * numpy.ones(4),
                0.0553571815436544 * numpy.ones(4),
                27.0/560.0 * numpy.ones(12),
                ])
            bary = numpy.concatenate([
                _mix_1_3(0.3561913862225449, 0.2146028712591517),
                _mix_1_3(0.8779781243961660, 0.0406739585346113),
                _mix_1_3(0.0329863295731731, 0.3223378901422757),
                _mix_1_1_2(
                    0.6030056647916491, 0.2696723314583159, 0.0636610018750175
                    ),
                ])
            self.degree = 6
        elif index == 8:
            self.weights = numpy.concatenate([
                0.1095853407966528 * numpy.ones(1),
                0.0635996491464850 * numpy.ones(4),
                -0.3751064406859797 * numpy.ones(4),
                0.0293485515784412 * numpy.ones(4),
                0.0058201058201058 * numpy.ones(6),
                0.1653439153439105 * numpy.ones(12),
                ])
            bary = numpy.concatenate([
                numpy.array([[0.25, 0.25, 0.25, 0.25]]),
                _mix_1_3(0.7653604230090441, 0.0782131923303186),
                _mix_1_3(0.6344703500082868, 0.1218432166639044),
                _mix_1_3(0.0023825066607383, 0.3325391644464206),
                _mix_2_2(0.0, 0.5),
                _mix_1_1_2(0.2, 0.6, 0.1),
                ])
            self.degree = 7
        elif index == 9:
            self.weights = numpy.concatenate([
                -0.2359620398477557 * numpy.ones(1),
                0.0244878963560562 * numpy.ones(4),
                0.0039485206398261 * numpy.ones(4),
                0.0263055529507371 * numpy.ones(6),
                0.0829803830550589 * numpy.ones(6),
                0.0254426245481023 * numpy.ones(12),
                0.0134324384376852 * numpy.ones(12),
                ])
            bary = numpy.concatenate([
                numpy.array([[0.25, 0.25, 0.25, 0.25]]),
                _mix_1_3(0.6175871903000830, 0.1274709365666390),
                _mix_1_3(0.9037635088221031, 0.0320788303926323),
                _mix_2_2(0.4502229043567190, 0.0497770956432810),
                _mix_2_2(0.3162695526014501, 0.1837304473985499),
                _mix_1_1_2(
                    0.0229177878448171, 0.5132800333608811, 0.2319010893971509
                    ),
                _mix_1_1_2(
                    0.7303134278075384, 0.1937464752488044, 0.0379700484718286
                    ),
                ])
            self.degree = 7
        else:
            raise ValueError('Illegal Keast index')
        self.points = bary[:, 1:]
        return


class NewtonCotesClosed(object):
    '''
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tet/quadrature_rules_tet.html
    '''
    def __init__(self, index):
        if index == 0:
            self.weights = numpy.array([
                1.0
                ])
            self.points = numpy.array([
                [0.25, 0.25, 0.25],
                ])
            self.degree = 1
        elif index == 1:
            self.weights = numpy.array([
                0.25,
                0.25,
                0.25,
                0.25,
                ])
            self.points = numpy.array([
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 1.0],
                [0.0, 1.0, 0.0],
                [1.0, 0.0, 0.0],
                ])
            self.degree = 1
        elif index == 2:
            self.weights = numpy.array([
                -0.05,
                -0.05,
                -0.05,
                -0.05,
                0.2,
                0.2,
                0.2,
                0.2,
                0.2,
                0.2,
                ])
            self.points = numpy.array([
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 1.0],
                [0.0, 1.0, 0.0],
                [1.0, 0.0, 0.0],
                [0.5, 0.5, 0.0],
                [0.5, 0.0, 0.5],
                [0.5, 0.0, 0.0],
                [0.0, 0.5, 0.5],
                [0.0, 0.5, 0.0],
                [0.0, 0.0, 0.5],
                ])
            self.degree = 2
        elif index == 3:
            self.weights = numpy.array([
                0.025,
                0.025,
                0.025,
                0.025,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.225,
                0.225,
                0.225,
                0.225,
                ])
            self.points = numpy.array([
                [0.0000000000000000, 0.0000000000000000, 0.0000000000000000],
                [0.0000000000000000, 0.0000000000000000, 1.0000000000000000],
                [0.0000000000000000, 1.0000000000000000, 0.0000000000000000],
                [1.0000000000000000, 0.0000000000000000, 0.0000000000000000],
                [0.0000000000000000, 0.0000000000000000, 0.3333333333333333],
                [0.0000000000000000, 0.0000000000000000, 0.6666666666666666],
                [0.0000000000000000, 0.3333333333333333, 0.0000000000000000],
                [0.0000000000000000, 0.3333333333333333, 0.6666666666666666],
                [0.0000000000000000, 0.6666666666666666, 0.0000000000000000],
                [0.0000000000000000, 0.6666666666666666, 0.3333333333333333],
                [0.3333333333333333, 0.0000000000000000, 0.0000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.6666666666666666],
                [0.3333333333333333, 0.6666666666666666, 0.0000000000000000],
                [0.6666666666666666, 0.0000000000000000, 0.0000000000000000],
                [0.6666666666666666, 0.0000000000000000, 0.3333333333333333],
                [0.6666666666666666, 0.3333333333333333, 0.0000000000000000],
                [0.3333333333333333, 0.3333333333333333, 0.3333333333333333],
                [0.3333333333333333, 0.3333333333333333, 0.0000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.3333333333333333],
                [0.0000000000000000, 0.3333333333333333, 0.3333333333333333],
                ])
            self.degree = 3
        elif index == 4:
            self.weights = numpy.array([
                -0.0119047619047619,
                -0.0119047619047619,
                -0.0119047619047619,
                -0.0119047619047619,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                -0.0285714285714286,
                -0.0285714285714286,
                -0.0285714285714286,
                -0.0285714285714286,
                -0.0285714285714286,
                -0.0285714285714286,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.0380952380952381,
                0.3047619047619048,
                ])
            self.points = numpy.array([
                [0.00, 0.00, 0.00],
                [0.00, 0.00, 1.00],
                [0.00, 1.00, 0.00],
                [1.00, 0.00, 0.00],
                [0.00, 0.00, 0.75],
                [0.00, 0.00, 0.25],
                [0.00, 0.75, 0.00],
                [0.00, 0.75, 0.25],
                [0.00, 0.25, 0.00],
                [0.00, 0.25, 0.75],
                [0.75, 0.00, 0.00],
                [0.75, 0.00, 0.25],
                [0.75, 0.25, 0.00],
                [0.25, 0.00, 0.00],
                [0.25, 0.00, 0.75],
                [0.25, 0.75, 0.00],
                [0.50, 0.50, 0.00],
                [0.50, 0.00, 0.50],
                [0.50, 0.00, 0.00],
                [0.00, 0.50, 0.50],
                [0.00, 0.50, 0.00],
                [0.00, 0.00, 0.50],
                [0.25, 0.25, 0.00],
                [0.25, 0.25, 0.50],
                [0.25, 0.00, 0.25],
                [0.25, 0.00, 0.50],
                [0.25, 0.50, 0.25],
                [0.25, 0.50, 0.00],
                [0.00, 0.25, 0.25],
                [0.00, 0.25, 0.50],
                [0.00, 0.50, 0.25],
                [0.50, 0.25, 0.25],
                [0.50, 0.25, 0.00],
                [0.50, 0.00, 0.25],
                [0.25, 0.25, 0.25],
                ])
            self.degree = 4
        elif index == 5:
            self.weights = numpy.array([
                0.0081845238095238,
                0.0081845238095238,
                0.0081845238095238,
                0.0081845238095238,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                -0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0086805555555556,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                0.0682043650793651,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                -0.0186011904761905,
                0.0930059523809524,
                0.0930059523809524,
                0.0930059523809524,
                0.0930059523809524,
                ])
            self.points = numpy.array([
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 1.0],
                [0.0, 1.0, 0.0],
                [1.0, 0.0, 0.0],
                [0.0, 0.0, 0.8],
                [0.0, 0.0, 0.2],
                [0.0, 0.8, 0.0],
                [0.0, 0.8, 0.2],
                [0.0, 0.2, 0.0],
                [0.0, 0.2, 0.8],
                [0.8, 0.0, 0.0],
                [0.8, 0.0, 0.2],
                [0.8, 0.2, 0.0],
                [0.2, 0.0, 0.0],
                [0.2, 0.0, 0.8],
                [0.2, 0.8, 0.0],
                [0.0, 0.0, 0.6],
                [0.0, 0.0, 0.4],
                [0.0, 0.6, 0.0],
                [0.0, 0.6, 0.4],
                [0.0, 0.4, 0.0],
                [0.0, 0.4, 0.6],
                [0.6, 0.0, 0.0],
                [0.6, 0.0, 0.4],
                [0.6, 0.4, 0.0],
                [0.4, 0.0, 0.0],
                [0.4, 0.0, 0.6],
                [0.4, 0.6, 0.0],
                [0.2, 0.2, 0.0],
                [0.2, 0.2, 0.6],
                [0.2, 0.0, 0.2],
                [0.2, 0.0, 0.6],
                [0.2, 0.6, 0.2],
                [0.2, 0.6, 0.0],
                [0.0, 0.2, 0.2],
                [0.0, 0.2, 0.6],
                [0.0, 0.6, 0.2],
                [0.6, 0.2, 0.2],
                [0.6, 0.2, 0.0],
                [0.6, 0.0, 0.2],
                [0.4, 0.4, 0.2],
                [0.4, 0.4, 0.0],
                [0.4, 0.2, 0.4],
                [0.4, 0.2, 0.0],
                [0.4, 0.0, 0.4],
                [0.4, 0.0, 0.2],
                [0.2, 0.4, 0.4],
                [0.2, 0.4, 0.0],
                [0.2, 0.0, 0.4],
                [0.0, 0.4, 0.4],
                [0.0, 0.4, 0.2],
                [0.0, 0.2, 0.4],
                [0.2, 0.2, 0.2],
                [0.2, 0.2, 0.4],
                [0.2, 0.4, 0.2],
                [0.4, 0.2, 0.2],
                ])
            self.degree = 5
        elif index == 6:
            self.weights = numpy.array([
                -0.005,
                -0.005,
                -0.005,
                -0.005,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                0.0171428571428571,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                -0.0214285714285714,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0285714285714286,
                0.0285714285714286,
                0.0285714285714286,
                0.0285714285714286,
                0.0285714285714286,
                0.0285714285714286,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.0214285714285714,
                0.1285714285714286,
                0.1285714285714286,
                0.1285714285714286,
                0.1285714285714286,
                -0.0321428571428571,
                -0.0321428571428571,
                -0.0321428571428571,
                -0.0321428571428571,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                ])
            self.points = numpy.array([
                [0.0000000000000000, 0.0000000000000000, 0.0000000000000000],
                [0.0000000000000000, 0.0000000000000000, 1.0000000000000000],
                [0.0000000000000000, 1.0000000000000000, 0.0000000000000000],
                [1.0000000000000000, 0.0000000000000000, 0.0000000000000000],
                [0.0000000000000000, 0.0000000000000000, 0.8333333333333334],
                [0.0000000000000000, 0.0000000000000000, 0.1666666666666667],
                [0.0000000000000000, 0.8333333333333334, 0.0000000000000000],
                [0.0000000000000000, 0.8333333333333334, 0.1666666666666667],
                [0.0000000000000000, 0.1666666666666667, 0.0000000000000000],
                [0.0000000000000000, 0.1666666666666667, 0.8333333333333334],
                [0.8333333333333334, 0.0000000000000000, 0.0000000000000000],
                [0.8333333333333334, 0.0000000000000000, 0.1666666666666667],
                [0.8333333333333334, 0.1666666666666667, 0.0000000000000000],
                [0.1666666666666667, 0.0000000000000000, 0.0000000000000000],
                [0.1666666666666667, 0.0000000000000000, 0.8333333333333334],
                [0.1666666666666667, 0.8333333333333334, 0.0000000000000000],
                [0.0000000000000000, 0.0000000000000000, 0.6666666666666666],
                [0.0000000000000000, 0.0000000000000000, 0.3333333333333333],
                [0.0000000000000000, 0.6666666666666666, 0.0000000000000000],
                [0.0000000000000000, 0.6666666666666666, 0.3333333333333333],
                [0.0000000000000000, 0.3333333333333333, 0.0000000000000000],
                [0.0000000000000000, 0.3333333333333333, 0.6666666666666666],
                [0.6666666666666666, 0.0000000000000000, 0.0000000000000000],
                [0.6666666666666666, 0.0000000000000000, 0.3333333333333333],
                [0.6666666666666666, 0.3333333333333333, 0.0000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.0000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.6666666666666666],
                [0.3333333333333333, 0.6666666666666666, 0.0000000000000000],
                [0.1666666666666667, 0.1666666666666667, 0.0000000000000000],
                [0.1666666666666667, 0.1666666666666667, 0.6666666666666666],
                [0.1666666666666667, 0.0000000000000000, 0.1666666666666667],
                [0.1666666666666667, 0.0000000000000000, 0.6666666666666666],
                [0.1666666666666667, 0.6666666666666666, 0.1666666666666667],
                [0.1666666666666667, 0.6666666666666666, 0.0000000000000000],
                [0.0000000000000000, 0.1666666666666667, 0.1666666666666667],
                [0.0000000000000000, 0.1666666666666667, 0.6666666666666666],
                [0.0000000000000000, 0.6666666666666666, 0.1666666666666667],
                [0.6666666666666666, 0.1666666666666667, 0.1666666666666667],
                [0.6666666666666666, 0.1666666666666667, 0.0000000000000000],
                [0.6666666666666666, 0.0000000000000000, 0.1666666666666667],
                [0.5000000000000000, 0.5000000000000000, 0.0000000000000000],
                [0.5000000000000000, 0.0000000000000000, 0.5000000000000000],
                [0.5000000000000000, 0.0000000000000000, 0.0000000000000000],
                [0.0000000000000000, 0.5000000000000000, 0.5000000000000000],
                [0.0000000000000000, 0.5000000000000000, 0.0000000000000000],
                [0.0000000000000000, 0.0000000000000000, 0.5000000000000000],
                [0.5000000000000000, 0.3333333333333333, 0.1666666666666667],
                [0.5000000000000000, 0.3333333333333333, 0.0000000000000000],
                [0.5000000000000000, 0.1666666666666667, 0.3333333333333333],
                [0.5000000000000000, 0.1666666666666667, 0.0000000000000000],
                [0.5000000000000000, 0.0000000000000000, 0.3333333333333333],
                [0.5000000000000000, 0.0000000000000000, 0.1666666666666667],
                [0.3333333333333333, 0.5000000000000000, 0.1666666666666667],
                [0.3333333333333333, 0.5000000000000000, 0.0000000000000000],
                [0.3333333333333333, 0.1666666666666667, 0.5000000000000000],
                [0.3333333333333333, 0.1666666666666667, 0.0000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.5000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.1666666666666667],
                [0.1666666666666667, 0.5000000000000000, 0.3333333333333333],
                [0.1666666666666667, 0.5000000000000000, 0.0000000000000000],
                [0.1666666666666667, 0.3333333333333333, 0.5000000000000000],
                [0.1666666666666667, 0.3333333333333333, 0.0000000000000000],
                [0.1666666666666667, 0.0000000000000000, 0.5000000000000000],
                [0.1666666666666667, 0.0000000000000000, 0.3333333333333333],
                [0.0000000000000000, 0.5000000000000000, 0.3333333333333333],
                [0.0000000000000000, 0.5000000000000000, 0.1666666666666667],
                [0.0000000000000000, 0.3333333333333333, 0.5000000000000000],
                [0.0000000000000000, 0.3333333333333333, 0.1666666666666667],
                [0.0000000000000000, 0.1666666666666667, 0.5000000000000000],
                [0.0000000000000000, 0.1666666666666667, 0.3333333333333333],
                [0.1666666666666667, 0.1666666666666667, 0.1666666666666667],
                [0.1666666666666667, 0.1666666666666667, 0.5000000000000000],
                [0.1666666666666667, 0.5000000000000000, 0.1666666666666667],
                [0.5000000000000000, 0.1666666666666667, 0.1666666666666667],
                [0.3333333333333333, 0.3333333333333333, 0.3333333333333333],
                [0.3333333333333333, 0.3333333333333333, 0.0000000000000000],
                [0.3333333333333333, 0.0000000000000000, 0.3333333333333333],
                [0.0000000000000000, 0.3333333333333333, 0.3333333333333333],
                [0.3333333333333333, 0.3333333333333333, 0.1666666666666667],
                [0.3333333333333333, 0.1666666666666667, 0.3333333333333333],
                [0.3333333333333333, 0.1666666666666667, 0.1666666666666667],
                [0.1666666666666667, 0.3333333333333333, 0.3333333333333333],
                [0.1666666666666667, 0.3333333333333333, 0.1666666666666667],
                [0.1666666666666667, 0.1666666666666667, 0.3333333333333333],
                ])
            self.degree = 6
        else:
            raise ValueError('Illegal closed Newton-Cotes index')
        return


class NewtonCotesOpen(object):
    '''
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tet/quadrature_rules_tet.html
    '''
    def __init__(self, index):
        if index == 0:
            self.weights = numpy.array([
                1.0
                ])
            self.points = numpy.array([
                [0.25, 0.25, 0.25],
                ])
            self.degree = 1
        elif index == 1:
            self.weights = numpy.array([
                0.25,
                0.25,
                0.25,
                0.25,
                ])
            self.points = numpy.array([
                [0.2, 0.2, 0.2],
                [0.2, 0.2, 0.4],
                [0.2, 0.4, 0.2],
                [0.4, 0.2, 0.2],
                ])
            self.degree = 1
        elif index == 2:
            self.weights = numpy.array([
                0.55,
                0.55,
                0.55,
                0.55,
                -0.2,
                -0.2,
                -0.2,
                -0.2,
                -0.2,
                -0.2,
                ])
            self.points = numpy.array([
                [0.1666666666666667, 0.1666666666666667, 0.1666666666666667],
                [0.1666666666666667, 0.1666666666666667, 0.5000000000000000],
                [0.1666666666666667, 0.5000000000000000, 0.1666666666666667],
                [0.5000000000000000, 0.1666666666666667, 0.1666666666666667],
                [0.3333333333333333, 0.3333333333333333, 0.1666666666666667],
                [0.3333333333333333, 0.1666666666666667, 0.3333333333333333],
                [0.3333333333333333, 0.1666666666666667, 0.1666666666666667],
                [0.1666666666666667, 0.3333333333333333, 0.3333333333333333],
                [0.1666666666666667, 0.3333333333333333, 0.1666666666666667],
                [0.1666666666666667, 0.1666666666666667, 0.3333333333333333],
                ])
            self.degree = 2
        elif index == 3:
            self.weights = numpy.array([
                0.1666666666666667,
                0.1666666666666667,
                0.1666666666666667,
                0.1666666666666667,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                0.1083333333333333,
                -0.2416666666666667,
                -0.2416666666666667,
                -0.2416666666666667,
                -0.2416666666666667,
                ])
            self.points = numpy.array([
                [0.1428571428571428, 0.1428571428571428, 0.1428571428571428],
                [0.1428571428571428, 0.1428571428571428, 0.5714285714285714],
                [0.1428571428571428, 0.5714285714285714, 0.1428571428571428],
                [0.5714285714285714, 0.1428571428571428, 0.1428571428571428],
                [0.1428571428571428, 0.1428571428571428, 0.2857142857142857],
                [0.1428571428571428, 0.1428571428571428, 0.4285714285714285],
                [0.1428571428571428, 0.2857142857142857, 0.1428571428571428],
                [0.1428571428571428, 0.2857142857142857, 0.4285714285714285],
                [0.1428571428571428, 0.4285714285714285, 0.1428571428571428],
                [0.1428571428571428, 0.4285714285714285, 0.2857142857142857],
                [0.2857142857142857, 0.1428571428571428, 0.1428571428571428],
                [0.2857142857142857, 0.1428571428571428, 0.4285714285714285],
                [0.2857142857142857, 0.4285714285714285, 0.1428571428571428],
                [0.4285714285714285, 0.1428571428571428, 0.1428571428571428],
                [0.4285714285714285, 0.1428571428571428, 0.2857142857142857],
                [0.4285714285714285, 0.2857142857142857, 0.1428571428571428],
                [0.2857142857142857, 0.2857142857142857, 0.2857142857142857],
                [0.2857142857142857, 0.2857142857142857, 0.1428571428571428],
                [0.2857142857142857, 0.1428571428571428, 0.2857142857142857],
                [0.1428571428571428, 0.2857142857142857, 0.2857142857142857],
                ])
            self.degree = 3
        elif index == 4:
            self.weights = numpy.array([
                0.3761904761904762,
                0.3761904761904762,
                0.3761904761904762,
                0.3761904761904762,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                -0.3238095238095238,
                0.6761904761904762,
                0.6761904761904762,
                0.6761904761904762,
                0.6761904761904762,
                0.6761904761904762,
                0.6761904761904762,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                -0.0571428571428571,
                0.0095238095238095,
                ])
            self.points = numpy.array([
                [0.125, 0.125, 0.125],
                [0.125, 0.125, 0.625],
                [0.125, 0.625, 0.125],
                [0.625, 0.125, 0.125],
                [0.125, 0.125, 0.500],
                [0.125, 0.125, 0.250],
                [0.125, 0.500, 0.125],
                [0.125, 0.500, 0.250],
                [0.125, 0.250, 0.125],
                [0.125, 0.250, 0.500],
                [0.500, 0.125, 0.125],
                [0.500, 0.125, 0.250],
                [0.500, 0.250, 0.125],
                [0.250, 0.125, 0.125],
                [0.250, 0.125, 0.500],
                [0.250, 0.500, 0.125],
                [0.375, 0.375, 0.125],
                [0.375, 0.125, 0.375],
                [0.375, 0.125, 0.125],
                [0.125, 0.375, 0.375],
                [0.125, 0.375, 0.125],
                [0.125, 0.125, 0.375],
                [0.250, 0.250, 0.125],
                [0.250, 0.250, 0.375],
                [0.250, 0.125, 0.250],
                [0.250, 0.125, 0.375],
                [0.250, 0.375, 0.250],
                [0.250, 0.375, 0.125],
                [0.125, 0.250, 0.250],
                [0.125, 0.250, 0.375],
                [0.125, 0.375, 0.250],
                [0.375, 0.250, 0.250],
                [0.375, 0.250, 0.125],
                [0.375, 0.125, 0.250],
                [0.250, 0.250, 0.250],
                ])
            self.degree = 4
        elif index == 5:
            self.weights = numpy.array([
                0.1236607142857143,
                0.1236607142857143,
                0.1236607142857143,
                0.1236607142857143,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0433035714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                0.0995535714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                -0.3183035714285714,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                0.2254464285714286,
                -0.0236607142857143,
                -0.0236607142857143,
                -0.0236607142857143,
                -0.0236607142857143,
                ])
            self.points = numpy.array([
                [0.1111111111111111, 0.1111111111111111, 0.1111111111111111],
                [0.1111111111111111, 0.1111111111111111, 0.6666666666666666],
                [0.1111111111111111, 0.6666666666666666, 0.1111111111111111],
                [0.6666666666666666, 0.1111111111111111, 0.1111111111111111],
                [0.1111111111111111, 0.1111111111111111, 0.5555555555555556],
                [0.1111111111111111, 0.1111111111111111, 0.2222222222222222],
                [0.1111111111111111, 0.5555555555555556, 0.1111111111111111],
                [0.1111111111111111, 0.5555555555555556, 0.2222222222222222],
                [0.1111111111111111, 0.2222222222222222, 0.1111111111111111],
                [0.1111111111111111, 0.2222222222222222, 0.5555555555555556],
                [0.5555555555555556, 0.1111111111111111, 0.1111111111111111],
                [0.5555555555555556, 0.1111111111111111, 0.2222222222222222],
                [0.5555555555555556, 0.2222222222222222, 0.1111111111111111],
                [0.2222222222222222, 0.1111111111111111, 0.1111111111111111],
                [0.2222222222222222, 0.1111111111111111, 0.5555555555555556],
                [0.2222222222222222, 0.5555555555555556, 0.1111111111111111],
                [0.1111111111111111, 0.1111111111111111, 0.4444444444444444],
                [0.1111111111111111, 0.1111111111111111, 0.3333333333333333],
                [0.1111111111111111, 0.4444444444444444, 0.1111111111111111],
                [0.1111111111111111, 0.4444444444444444, 0.3333333333333333],
                [0.1111111111111111, 0.3333333333333333, 0.1111111111111111],
                [0.1111111111111111, 0.3333333333333333, 0.4444444444444444],
                [0.4444444444444444, 0.1111111111111111, 0.1111111111111111],
                [0.4444444444444444, 0.1111111111111111, 0.3333333333333333],
                [0.4444444444444444, 0.3333333333333333, 0.1111111111111111],
                [0.3333333333333333, 0.1111111111111111, 0.1111111111111111],
                [0.3333333333333333, 0.1111111111111111, 0.4444444444444444],
                [0.3333333333333333, 0.4444444444444444, 0.1111111111111111],
                [0.2222222222222222, 0.2222222222222222, 0.1111111111111111],
                [0.2222222222222222, 0.2222222222222222, 0.4444444444444444],
                [0.2222222222222222, 0.1111111111111111, 0.2222222222222222],
                [0.2222222222222222, 0.1111111111111111, 0.4444444444444444],
                [0.2222222222222222, 0.4444444444444444, 0.2222222222222222],
                [0.2222222222222222, 0.4444444444444444, 0.1111111111111111],
                [0.1111111111111111, 0.2222222222222222, 0.2222222222222222],
                [0.1111111111111111, 0.2222222222222222, 0.4444444444444444],
                [0.1111111111111111, 0.4444444444444444, 0.2222222222222222],
                [0.4444444444444444, 0.2222222222222222, 0.2222222222222222],
                [0.4444444444444444, 0.2222222222222222, 0.1111111111111111],
                [0.4444444444444444, 0.1111111111111111, 0.2222222222222222],
                [0.3333333333333333, 0.3333333333333333, 0.2222222222222222],
                [0.3333333333333333, 0.3333333333333333, 0.1111111111111111],
                [0.3333333333333333, 0.2222222222222222, 0.3333333333333333],
                [0.3333333333333333, 0.2222222222222222, 0.1111111111111111],
                [0.3333333333333333, 0.1111111111111111, 0.3333333333333333],
                [0.3333333333333333, 0.1111111111111111, 0.2222222222222222],
                [0.2222222222222222, 0.3333333333333333, 0.3333333333333333],
                [0.2222222222222222, 0.3333333333333333, 0.1111111111111111],
                [0.2222222222222222, 0.1111111111111111, 0.3333333333333333],
                [0.1111111111111111, 0.3333333333333333, 0.3333333333333333],
                [0.1111111111111111, 0.3333333333333333, 0.2222222222222222],
                [0.1111111111111111, 0.2222222222222222, 0.3333333333333333],
                [0.2222222222222222, 0.2222222222222222, 0.2222222222222222],
                [0.2222222222222222, 0.2222222222222222, 0.3333333333333333],
                [0.2222222222222222, 0.3333333333333333, 0.2222222222222222],
                [0.3333333333333333, 0.2222222222222222, 0.2222222222222222],
                ])
            self.degree = 5
        elif index == 6:
            self.weights = numpy.array([
                0.2843915343915344,
                0.2843915343915344,
                0.2843915343915344,
                0.2843915343915344,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                -0.3882275132275133,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.8776455026455027,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                0.1236772486772487,
                -0.8584656084656085,
                -0.8584656084656085,
                -0.8584656084656085,
                -0.8584656084656085,
                -0.8584656084656085,
                -0.8584656084656085,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                -0.2632275132275133,
                0.0145502645502645,
                0.0145502645502645,
                0.0145502645502645,
                0.0145502645502645,
                1.0165343915343916,
                1.0165343915343916,
                1.0165343915343916,
                1.0165343915343916,
                -0.0251322751322751,
                -0.0251322751322751,
                -0.0251322751322751,
                -0.0251322751322751,
                -0.0251322751322751,
                -0.0251322751322751,
                ])
            self.points = numpy.array([
                [0.1, 0.1, 0.1],
                [0.1, 0.1, 0.7],
                [0.1, 0.7, 0.1],
                [0.7, 0.1, 0.1],
                [0.1, 0.1, 0.6],
                [0.1, 0.1, 0.2],
                [0.1, 0.6, 0.1],
                [0.1, 0.6, 0.2],
                [0.1, 0.2, 0.1],
                [0.1, 0.2, 0.6],
                [0.6, 0.1, 0.1],
                [0.6, 0.1, 0.2],
                [0.6, 0.2, 0.1],
                [0.2, 0.1, 0.1],
                [0.2, 0.1, 0.6],
                [0.2, 0.6, 0.1],
                [0.1, 0.1, 0.5],
                [0.1, 0.1, 0.3],
                [0.1, 0.5, 0.1],
                [0.1, 0.5, 0.3],
                [0.1, 0.3, 0.1],
                [0.1, 0.3, 0.5],
                [0.5, 0.1, 0.1],
                [0.5, 0.1, 0.3],
                [0.5, 0.3, 0.1],
                [0.3, 0.1, 0.1],
                [0.3, 0.1, 0.5],
                [0.3, 0.5, 0.1],
                [0.2, 0.2, 0.1],
                [0.2, 0.2, 0.5],
                [0.2, 0.1, 0.2],
                [0.2, 0.1, 0.5],
                [0.2, 0.5, 0.2],
                [0.2, 0.5, 0.1],
                [0.1, 0.2, 0.2],
                [0.1, 0.2, 0.5],
                [0.1, 0.5, 0.2],
                [0.5, 0.2, 0.2],
                [0.5, 0.2, 0.1],
                [0.5, 0.1, 0.2],
                [0.4, 0.4, 0.1],
                [0.4, 0.1, 0.4],
                [0.4, 0.1, 0.1],
                [0.1, 0.4, 0.4],
                [0.1, 0.4, 0.1],
                [0.1, 0.1, 0.4],
                [0.4, 0.3, 0.2],
                [0.4, 0.3, 0.1],
                [0.4, 0.2, 0.3],
                [0.4, 0.2, 0.1],
                [0.4, 0.1, 0.3],
                [0.4, 0.1, 0.2],
                [0.3, 0.4, 0.2],
                [0.3, 0.4, 0.1],
                [0.3, 0.2, 0.4],
                [0.3, 0.2, 0.1],
                [0.3, 0.1, 0.4],
                [0.3, 0.1, 0.2],
                [0.2, 0.4, 0.3],
                [0.2, 0.4, 0.1],
                [0.2, 0.3, 0.4],
                [0.2, 0.3, 0.1],
                [0.2, 0.1, 0.4],
                [0.2, 0.1, 0.3],
                [0.1, 0.4, 0.3],
                [0.1, 0.4, 0.2],
                [0.1, 0.3, 0.4],
                [0.1, 0.3, 0.2],
                [0.1, 0.2, 0.4],
                [0.1, 0.2, 0.3],
                [0.2, 0.2, 0.2],
                [0.2, 0.2, 0.4],
                [0.2, 0.4, 0.2],
                [0.4, 0.2, 0.2],
                [0.3, 0.3, 0.3],
                [0.3, 0.3, 0.1],
                [0.3, 0.1, 0.3],
                [0.1, 0.3, 0.3],
                [0.3, 0.3, 0.2],
                [0.3, 0.2, 0.3],
                [0.3, 0.2, 0.2],
                [0.2, 0.3, 0.3],
                [0.2, 0.3, 0.2],
                [0.2, 0.2, 0.3],
                ])
            self.degree = 6
        else:
            raise ValueError('Illegal closed Newton-Cotes index')
        return


class Zienkiewicz(object):
    '''
    Olgierd Zienkiewicz,
    The Finite Element Method,
    Sixth Edition,
    Butterworth-Heinemann, 2005,
    ISBN: 0750663200,
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tet/quadrature_rules_tet.html
    '''
    def __init__(self, index):
        if index == 4:
            self.weights = numpy.array([
                0.25,
                0.25,
                0.25,
                0.25
                ])
            self.points = numpy.array([
                [0.5854101966249685, 0.1381966011250105, 0.1381966011250105],
                [0.1381966011250105, 0.5854101966249685, 0.1381966011250105],
                [0.1381966011250105, 0.1381966011250105, 0.5854101966249685],
                [0.1381966011250105, 0.1381966011250105, 0.1381966011250105],
                ])
            self.degree = 2
        elif index == 5:
            self.weights = numpy.array([
                -0.8,
                0.45,
                0.45,
                0.45,
                0.45,
                ])
            self.points = numpy.array([
                [0.25, 0.25, 0.25],
                [0.5, 1.0/6.0, 1.0/6.0],
                [1.0/6.0, 0.5, 1.0/6.0],
                [1.0/6.0, 1.0/6.0, 0.5],
                [1.0/6.0, 1.0/6.0, 1.0/6.0],
                ])
            self.degree = 3
        else:
            raise ValueError('Illegal closed Newton-Cotes index')


class ShunnHam(object):
    '''
    Lee Shunn, Frank Ham,
    Symmetric quadrature rules for tetrahedra based on a cubic
    close-packed lattice arrangement,
    Journal of Computational and Applied Mathematics,
    2012,
    <http://dx.doi.org/10.1016/j.cam.2012.03.032>.

    Abstract:
    A family of quadrature rules for integration over tetrahedral volumes is
    developed. The underlying structure of the rules is based on the cubic
    close-packed (CCP) lattice arrangement using 1, 4, 10, 20, 35, and 56
    quadrature points. The rules are characterized by rapid convergence,
    positive weights, and symmetry. Each rule is an optimal approximation in
    the sense that lower-order terms have zero contribution to the truncation
    error and the leading-order error term is minimized. Quadrature formulas up
    to order 9 are presented with relevant numerical examples.
    '''
    def __init__(self, index):
        if index == 1:
            self.weights = numpy.array([
                1.0
                ])
            bary = numpy.array([
                [0.25, 0.25, 0.25, 0.25]
                ])
            self.degree = 1
        elif index == 2:
            self.weights = 0.25 * numpy.ones(4)
            bary = _mix_1_3(0.5854101966249680, 0.1381966011250110)
            self.degree = 2
        elif index == 3:
            self.weights = numpy.concatenate([
                0.0476331348432089 * numpy.ones(4),
                0.1349112434378610 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                _mix_1_3(0.7784952948213300, 0.0738349017262234),
                _mix_2_2(0.4062443438840510, 0.0937556561159491),
                ])
            self.degree = 3
        elif index == 4:
            self.weights = numpy.concatenate([
                0.0070670747944695 * numpy.ones(4),
                0.0469986689718877 * numpy.ones(12),
                0.1019369182898680 * numpy.ones(4),
                ])
            bary = numpy.concatenate([
                _mix_1_3(0.9029422158182680, 0.0323525947272439),
                _mix_1_1_2(
                    0.6165965330619370, 0.2626825838877790, 0.0603604415251421
                    ),
                _mix_1_3(0.0706920871814129, 0.3097693042728620),
                ])
            self.degree = 5
        elif index == 5:
            self.weights = numpy.concatenate([
                0.0021900463965388 * numpy.ones(4),
                0.0143395670177665 * numpy.ones(12),
                0.0250305395686746 * numpy.ones(6),
                0.0479839333057554 * numpy.ones(12),
                0.0931745731195340 * numpy.ones(1)
                ])
            bary = numpy.concatenate([
                _mix_1_3(0.9197896733368800, 0.0267367755543735),
                _mix_1_1_2(
                    0.1740356302468940, 0.7477598884818090, 0.0391022406356488
                    ),
                _mix_2_2(0.4547545999844830, 0.0452454000155172),
                _mix_1_1_2(
                    0.5031186450145980, 0.0504792790607720, 0.2232010379623150
                    ),
                numpy.array([[0.25, 0.25, 0.25, 0.25]]),
                ])
            self.degree = 6
        elif index == 6:
            self.weights = numpy.concatenate([
                0.0010373112336140 * numpy.ones(4),
                0.0096016645399480 * numpy.ones(12),
                0.0164493976798232 * numpy.ones(12),
                0.0153747766513310 * numpy.ones(12),
                0.0293520118375230 * numpy.ones(12),
                0.0366291366405108 * numpy.ones(4),
                ])
            bary = numpy.concatenate([
                _mix_1_3(0.9551438045408220, 0.0149520651530592),
                _mix_1_1_2(
                    0.7799760084415400, 0.1518319491659370, 0.0340960211962615
                    ),
                _mix_1_1_2(
                    0.3549340560639790, 0.5526556431060170, 0.0462051504150017
                    ),
                _mix_1_1_2(
                    0.5381043228880020, 0.0055147549744775, 0.2281904610687610
                    ),
                _mix_1_1_2(
                    0.1961837595745600, 0.0992057202494530, 0.3523052600879940
                    ),
                _mix_1_3(0.5965649956210170, 0.1344783347929940)
                ])
            self.degree = 7
        else:
            raise ValueError('Illegal Shunn-Ham index')

        self.points = bary[:, 1:]

        return


class ZhangCuiLiu(object):
    '''
    Linbo Zhang, Tao Cui and Hui Liu,
    A set of symmetric quadrature rules on triangles and tetrahedra,
    Journal of Computational Mathematics
    Vol. 27, No. 1 (January 2009), pp. 89-96.

    Abstract:
    We present a program for computing symmetric quadrature rules on triangles
    and tetrahedra. A set of rules are obtained by using this program.
    Quadrature rules up to order 21 on triangles and up to order 14 on
    tetrahedra have been obtained which are useful for use in finite element
    computations. All rules presented here have positive weights with points
    lying within the integration domain.
    '''
    def __init__(self, index):
        if index == 1:
            self.weights = numpy.concatenate([
                0.0063971477799023213214514203351730 * numpy.ones(4),
                0.0401904480209661724881611584798178 * numpy.ones(4),
                0.0243079755047703211748691087719226 * numpy.ones(4),
                0.0548588924136974404669241239903914 * numpy.ones(4),
                0.0357196122340991824649509689966176 * numpy.ones(6),
                0.0071831906978525394094511052198038 * numpy.ones(12),
                0.0163721819453191175409381397561191 * numpy.ones(12),
                ])
            bary = numpy.concatenate([
                self.s31(.0396754230703899012650713295393895),
                self.s31(.3144878006980963137841605626971483),
                self.s31(.1019866930627033000000000000000000),
                self.s31(.1842036969491915122759464173489092),
                self.s22(.0634362877545398924051412387018983),
                self.s211(
                    .0216901620677280048026624826249302,
                    .7199319220394659358894349533527348
                    ),
                self.s211(
                    .2044800806367957142413355748727453,
                    .5805771901288092241753981713906204
                    ),
                ])
            self.degree = 8
        else:
            raise ValueError('Illegal Zhang index')

        self.points = bary[:, [1, 2, 3]]
        return

    def s31(self, a):
        b = 1.0 - 3*a
        return numpy.array([
            [a, a, a, b],
            [a, a, b, a],
            [a, b, a, a],
            [b, a, a, a],
            ])

    def s22(self, a):
        b = 0.5 - a
        return numpy.array([
            [a, a, b, b],
            [a, b, a, b],
            [b, a, a, b],
            [a, b, b, a],
            [b, a, b, a],
            [b, b, a, a],
            ])

    def s211(self, a, b):
        c = 1.0 - 2*a - b
        return numpy.array([
            [a, a, b, c],
            [a, b, a, c],
            [b, a, a, c],
            [a, b, c, a],
            [b, a, c, a],
            [b, c, a, a],
            [a, a, c, b],
            [a, c, a, b],
            [c, a, a, b],
            [a, c, b, a],
            [c, a, b, a],
            [c, b, a, a],
            ])

    def s1111(self, a, b, c):
        d = 1.0 - a - b - c
        return numpy.array([
            [a, b, c, d],
            [a, b, d, c],
            [a, c, b, d],
            [a, c, d, b],
            [a, d, b, c],
            [a, d, c, b],
            [b, a, c, d],
            [b, a, d, c],
            [b, c, a, d],
            [b, c, d, a],
            [b, d, a, c],
            [b, d, c, a],
            [c, a, b, d],
            [c, a, d, b],
            [c, b, a, d],
            [c, b, d, a],
            [c, d, a, b],
            [c, d, b, a],
            [d, a, b, c],
            [d, a, c, b],
            [d, b, a, c],
            [d, b, c, a],
            [d, c, a, b],
            [d, c, b, a],
            ])
