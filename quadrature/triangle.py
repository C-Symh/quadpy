# -*- coding: utf-8 -*-
#
import math
import numpy


def volume(triangle):
    # It doesn't matter much which cross product we take for computing the
    # triangle volumes; deliberately take
    #
    #   <e0 x e1, e0 x e1> = <e0, e0> <e1, e1> - <e0, e1>^2.
    #
    e0 = triangle[1] - triangle[0]
    e1 = triangle[2] - triangle[1]
    e0_dot_e0 = numpy.dot(e0, e0)
    e0_dot_e1 = numpy.dot(e0, e1)
    e1_dot_e1 = numpy.dot(e1, e1)
    return 0.5 * numpy.sqrt(e0_dot_e0 * e1_dot_e1 - e0_dot_e1**2)


def show(triangle, scheme, circle_scale=1.0):
    '''Shows the quadrature points on a given triangle. The size of the circles
    around the points coincides with their weights.
    '''
    from matplotlib import pyplot as plt

    plt.plot(triangle[:, 0], triangle[:, 1], '-k')
    plt.plot(
        [triangle[-1, 0], triangle[0, 0]],
        [triangle[-1, 1], triangle[0, 1]],
        '-k')

    transformed_pts = \
        + numpy.outer(
            (1.0 - scheme.points[:, 0] - scheme.points[:, 1]),
            triangle[0]
            ) \
        + numpy.outer(scheme.points[:, 0], triangle[1]) \
        + numpy.outer(scheme.points[:, 1], triangle[2])

    # plt.plot(transformed_pts[:, 0], transformed_pts[:, 1], 'or')
    triangle_vol = volume(triangle)
    for tp, weight in zip(transformed_pts, scheme.weights):
        color = 'b' if weight >= 0 else 'r'
        # highlight circle center
        plt.plot([tp[0]], [tp[1]], '.' + color)
        # plot circle
        # scale the circle volume according to the weight
        radius = circle_scale \
            * numpy.sqrt(triangle_vol * abs(weight) / numpy.pi)
        circ = plt.Circle((tp[0], tp[1]), radius, color=color, alpha=0.5)
        plt.gcf().gca().add_artist(circ)

    plt.axis('equal')
    return


def _transform_to_unit_triangle(f, triangle):
    '''Transformation

      x = x0 * N0(xi, eta) + x1 * N1(xi, eta) + x2 * N2(xi, eta)

    with

      N0(xi, eta) = 1 - xi - eta,
      N1(xi, eta) = xi,
      N2(xi, eta) = eta.
    '''
    return lambda xi: f(
        + triangle[0] * (1.0 - xi[0] - xi[1])
        + triangle[1] * xi[0]
        + triangle[2] * xi[1]
        )


def integrate(f, triangle, rule):
    # w * f(x(xi)) * |det(J)|
    g = _transform_to_unit_triangle(f, triangle)
    out = math.fsum([
        weight * g(point)
        for point, weight in zip(rule.points, rule.weights)
        ])
    return volume(triangle) * out


class Centroid(object):
    def __init__(self):
        self.weights = [1.0]
        self.points = numpy.array([
            [1.0/3.0, 1.0/3.0]
            ])
        self.degree = 1
        return


class Vertex(object):
    def __init__(self):
        self.weights = [1.0/3.0, 1.0/3.0, 1.0/3.0]
        self.points = numpy.array([
            [0.0, 0.0],
            [1.0, 0.0],
            [0.0, 1.0],
            ])
        self.degree = 1
        return


class SevenPoint(object):
    def __init__(self):
        self.weights = [
            0.45,
            0.05,
            0.05,
            0.05,
            2.0 / 15.0,
            2.0 / 15.0,
            2.0 / 15.0
            ]
        self.points = numpy.array([
            [1.0/3.0, 1.0/3.0],
            [1.0, 0.0],
            [0.0, 1.0],
            [0.0, 0.0],
            [0.0, 0.5],
            [0.5, 0.0],
            [0.5, 0.5],
            ])
        self.degree = 3
        return


class Strang(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self, index):
        if index == 1:
            self.weights = [1.0/3.0, 1.0/3.0, 1.0/3.0]
            self.points = numpy.array([
                [2.0/3.0, 1.0/6.0],
                [1.0/6.0, 2.0/3.0],
                [1.0/6.0, 1.0/6.0],
                ])
            self.degree = 2
        elif index == 2:
            self.weights = [1.0/3.0, 1.0/3.0, 1.0/3.0]
            self.points = numpy.array([
                [0.5, 0.0],
                [0.5, 0.5],
                [0.0, 0.5],
                ])
            self.degree = 2
        elif index == 3:
            self.weights = [
                -0.5625,
                25.0 / 48.0,
                25.0 / 48.0,
                25.0 / 48.0
                ]
            self.points = numpy.array([
                [1.0/3.0, 1.0/3.0],
                [0.6, 0.2],
                [0.2, 0.6],
                [0.2, 0.2],
                ])
            self.degree = 3
        elif index == 4:
            self.weights = [
                1.0/6.0,
                1.0/6.0,
                1.0/6.0,
                1.0/6.0,
                1.0/6.0,
                1.0/6.0,
                ]
            self.points = numpy.array([
                [0.659027622374092, 0.231933368553031],
                [0.659027622374092, 0.109039009072877],
                [0.231933368553031, 0.659027622374092],
                [0.231933368553031, 0.109039009072877],
                [0.109039009072877, 0.659027622374092],
                [0.109039009072877, 0.231933368553031],
                ])
            self.degree = 3
        elif index == 5:
            self.weights = [
                0.109951743655322,
                0.109951743655322,
                0.109951743655322,
                0.223381589678011,
                0.223381589678011,
                0.223381589678011,
                ]
            self.points = numpy.array([
                [0.816847572980459, 0.091576213509771],
                [0.091576213509771, 0.816847572980459],
                [0.091576213509771, 0.091576213509771],
                [0.108103018168070, 0.445948490915965],
                [0.445948490915965, 0.108103018168070],
                [0.445948490915965, 0.445948490915965],
                ])
            self.degree = 4
        elif index == 6:
            self.weights = [
                0.375,
                5.0 / 48.0,
                5.0 / 48.0,
                5.0 / 48.0,
                5.0 / 48.0,
                5.0 / 48.0,
                5.0 / 48.0,
                ]
            self.points = numpy.array([
                [0.333333333333333, 0.333333333333333],
                [0.736712498968435, 0.237932366472434],
                [0.736712498968435, 0.025355134551932],
                [0.237932366472434, 0.736712498968435],
                [0.237932366472434, 0.025355134551932],
                [0.025355134551932, 0.736712498968435],
                [0.025355134551932, 0.237932366472434],
                ])
            self.degree = 4
        elif index == 7:
            self.weights = [
                0.225,
                0.12593918054482717,
                0.12593918054482717,
                0.12593918054482717,
                0.13239415278850616,
                0.13239415278850616,
                0.13239415278850616,
                ]

            self.points = numpy.array([
                [0.33333333333333333, 0.33333333333333333],
                [0.79742698535308720, 0.10128650732345633],
                [0.10128650732345633, 0.79742698535308720],
                [0.10128650732345633, 0.10128650732345633],
                [0.05971587178976981, 0.47014206410511505],
                [0.47014206410511505, 0.05971587178976981],
                [0.47014206410511505, 0.47014206410511505],
                ])
            self.degree = 5
        elif index == 8:
            self.weights = [
                0.205950504760887,
                0.205950504760887,
                0.205950504760887,
                0.063691414286223,
                0.063691414286223,
                0.063691414286223,
                0.063691414286223,
                0.063691414286223,
                0.063691414286223,
                ]

            self.points = numpy.array([
                [0.124949503233232, 0.437525248383384],
                [0.437525248383384, 0.124949503233232],
                [0.437525248383384, 0.437525248383384],
                [0.797112651860071, 0.165409927389841],
                [0.797112651860071, 0.037477420750088],
                [0.165409927389841, 0.797112651860071],
                [0.165409927389841, 0.037477420750088],
                [0.037477420750088, 0.797112651860071],
                [0.037477420750088, 0.165409927389841],
                ])
            self.degree = 5
        elif index == 9:
            self.weights = [
                0.050844906370207,
                0.050844906370207,
                0.050844906370207,
                0.116786275726379,
                0.116786275726379,
                0.116786275726379,
                0.082851075618374,
                0.082851075618374,
                0.082851075618374,
                0.082851075618374,
                0.082851075618374,
                0.082851075618374,
                ]

            self.points = numpy.array([
                [0.873821971016996, 0.063089014491502],
                [0.063089014491502, 0.873821971016996],
                [0.063089014491502, 0.063089014491502],
                [0.501426509658179, 0.249286745170910],
                [0.249286745170910, 0.501426509658179],
                [0.249286745170910, 0.249286745170910],
                [0.636502499121399, 0.310352451033785],
                [0.636502499121399, 0.053145049844816],
                [0.310352451033785, 0.636502499121399],
                [0.310352451033785, 0.053145049844816],
                [0.053145049844816, 0.636502499121399],
                [0.053145049844816, 0.310352451033785],
                ])
            self.degree = 6
        elif index == 10:
            self.weights = [
                -0.149570044467670,
                0.175615257433204,
                0.175615257433204,
                0.175615257433204,
                0.053347235608839,
                0.053347235608839,
                0.053347235608839,
                0.077113760890257,
                0.077113760890257,
                0.077113760890257,
                0.077113760890257,
                0.077113760890257,
                0.077113760890257,
                ]

            self.points = numpy.array([
                [0.333333333333333, 0.333333333333333],
                [0.479308067841923, 0.260345966079038],
                [0.260345966079038, 0.479308067841923],
                [0.260345966079038, 0.260345966079038],
                [0.869739794195568, 0.065130102902216],
                [0.065130102902216, 0.869739794195568],
                [0.065130102902216, 0.065130102902216],
                [0.638444188569809, 0.312865496004875],
                [0.638444188569809, 0.048690315425316],
                [0.312865496004875, 0.638444188569809],
                [0.312865496004875, 0.048690315425316],
                [0.048690315425316, 0.638444188569809],
                [0.048690315425316, 0.312865496004875],
                ])
            self.degree = 7
        else:
            raise ValueError('Illegal Strang index')

        return


class Toms584_19(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Laurie, D. P.,
    Algorithm 584: CUBTRI: Automatic Cubature over a Triangle,
    ACM Trans. Math. Softw.,
    June 1982,
    <http://dl.acm.org/citation.cfm?id=356001>.
    '''
    def __init__(self):
        self.weights = [
            0.0378610912003147,
            0.0376204254131829,
            0.0376204254131829,
            0.0376204254131829,
            0.0783573522441174,
            0.0783573522441174,
            0.0783573522441174,
            0.1162714796569659,
            0.1162714796569659,
            0.1162714796569659,
            0.0134442673751655,
            0.0134442673751655,
            0.0134442673751655,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            ]

        self.points = numpy.array([
            [0.3333333333333333, 0.3333333333333333],
            [0.7974269853530872, 0.1012865073234563],
            [0.1012865073234563, 0.7974269853530872],
            [0.1012865073234563, 0.1012865073234563],
            [0.0597158717897698, 0.4701420641051151],
            [0.4701420641051151, 0.0597158717897698],
            [0.4701420641051151, 0.4701420641051151],
            [0.5357953464498992, 0.2321023267750504],
            [0.2321023267750504, 0.5357953464498992],
            [0.2321023267750504, 0.2321023267750504],
            [0.9410382782311209, 0.0294808608844396],
            [0.0294808608844396, 0.9410382782311209],
            [0.0294808608844396, 0.0294808608844396],
            [0.7384168123405100, 0.2321023267750504],
            [0.7384168123405100, 0.0294808608844396],
            [0.2321023267750504, 0.7384168123405100],
            [0.2321023267750504, 0.0294808608844396],
            [0.0294808608844396, 0.7384168123405100],
            [0.0294808608844396, 0.2321023267750504],
            ])
        self.degree = 8
        return


class Toms612_19(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    E. de Doncker and I. Robinson,
    Algorithm 612: TRIEX: Integration Over a TRIangle Using Nonlinear
    EXtrapolation,
    ACM Trans. Math. Softw.,
    March 1984,
    <http://dl.acm.org/citation.cfm?id=356070&CFID=836775288&CFTOKEN=89206835>.
    '''
    def __init__(self):
        self.weights = [
            9.71357962827961025E-002,
            3.13347002271398278E-002,
            3.13347002271398278E-002,
            3.13347002271398278E-002,
            7.78275410047754301E-002,
            7.78275410047754301E-002,
            7.78275410047754301E-002,
            7.96477389272090969E-002,
            7.96477389272090969E-002,
            7.96477389272090969E-002,
            2.55776756586981006E-002,
            2.55776756586981006E-002,
            2.55776756586981006E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            ]

        self.points = numpy.array([
            [0.33333333333333331, 0.33333333333333331],
            [2.06349616025259287E-002, 0.48968251919873701],
            [0.48968251919873701, 2.06349616025259287E-002],
            [0.48968251919873701, 0.48968251919873701],
            [0.12582081701412900, 0.43708959149293553],
            [0.43708959149293553, 0.12582081701412900],
            [0.43708959149293553, 0.43708959149293553],
            [0.62359292876193562, 0.18820353561903219],
            [0.18820353561903219, 0.62359292876193562],
            [0.18820353561903219, 0.18820353561903219],
            [0.91054097321109406, 4.47295133944529688E-002],
            [4.47295133944529688E-002, 0.91054097321109406],
            [4.47295133944529688E-002, 4.47295133944529688E-002],
            [0.74119859878449801, 3.68384120547362581E-002],
            [0.74119859878449801, 0.22196298916076573],
            [3.68384120547362581E-002, 0.74119859878449801],
            [3.68384120547362581E-002, 0.22196298916076573],
            [0.22196298916076573, 0.74119859878449801],
            [0.22196298916076573, 3.68384120547362581E-002],
            ])
        self.degree = 9
        return


class Toms612_28(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    E. de Doncker and I. Robinson,
    Algorithm 612: TRIEX: Integration Over a TRIangle Using Nonlinear
    EXtrapolation,
    ACM Trans. Math. Softw.,
    March 1984,
    <http://dl.acm.org/citation.cfm?id=356070&CFID=836775288&CFTOKEN=89206835>.
    '''
    def __init__(self):
        self.weights = [
            0.08797730116222190,
            0.008744311553736190,
            0.008744311553736190,
            0.008744311553736190,
            0.03808157199393533,
            0.03808157199393533,
            0.03808157199393533,
            0.01885544805613125,
            0.01885544805613125,
            0.01885544805613125,
            0.07215969754474100,
            0.07215969754474100,
            0.07215969754474100,
            0.06932913870553720,
            0.06932913870553720,
            0.06932913870553720,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            ]

        self.points = numpy.array([
            [0.33333333333333333, 0.333333333333333333],
            [0.9480217181434233, 0.02598914092828833],
            [0.02598914092828833, 0.9480217181434233],
            [0.02598914092828833, 0.02598914092828833],
            [0.8114249947041546, 0.09428750264792270],
            [0.09428750264792270, 0.8114249947041546],
            [0.09428750264792270, 0.09428750264792270],
            [0.01072644996557060, 0.4946367750172147],
            [0.4946367750172147, 0.01072644996557060],
            [0.4946367750172147, 0.4946367750172147],
            [0.5853132347709715, 0.2073433826145142],
            [0.2073433826145142, 0.5853132347709715],
            [0.2073433826145142, 0.2073433826145142],
            [0.1221843885990187, 0.4389078057004907],
            [0.4389078057004907, 0.1221843885990187],
            [0.4389078057004907, 0.4389078057004907],
            [0.6779376548825902, 0.04484167758913055],
            [0.6779376548825902, 0.27722066752827925],
            [0.04484167758913055, 0.6779376548825902],
            [0.04484167758913055, 0.27722066752827925],
            [0.27722066752827925, 0.6779376548825902],
            [0.27722066752827925, 0.04484167758913055],
            [0.8588702812826364, 0.00000000000000000],
            [0.8588702812826364, 0.1411297187173636],
            [0.0000000000000000, 0.8588702812826364],
            [0.0000000000000000, 0.1411297187173636],
            [0.1411297187173636, 0.8588702812826364],
            [0.1411297187173636, 0.0000000000000000],
            ])
        self.degree = 11
        return


class Toms706_37(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Berntsen and Espelid,
    Algorithm 706: DCUTRI: An Algorithm for Adaptive Cubature over a Collection
    of Triangles,
    ACM Trans. Math. Softw.,
    Sept. 1992,
    10.1145/131766.131772,
    <http://dl.acm.org/citation.cfm?id=131772>.
    '''
    def __init__(self):
        self.weights = [
            0.051739766065744133555179145422,
            0.008007799555564801597804123460,
            0.008007799555564801597804123460,
            0.008007799555564801597804123460,
            0.046868898981821644823226732071,
            0.046868898981821644823226732071,
            0.046868898981821644823226732071,
            0.046590940183976487960361770070,
            0.046590940183976487960361770070,
            0.046590940183976487960361770070,
            0.031016943313796381407646220131,
            0.031016943313796381407646220131,
            0.031016943313796381407646220131,
            0.010791612736631273623178240136,
            0.010791612736631273623178240136,
            0.010791612736631273623178240136,
            0.032195534242431618819414482205,
            0.032195534242431618819414482205,
            0.032195534242431618819414482205,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            ]

        self.points = numpy.array([
            [0.333333333333333333333333333333, 0.333333333333333333333333333333],
            [0.950275662924105565450352089520, 0.024862168537947217274823955239],
            [0.024862168537947217274823955239, 0.950275662924105565450352089520],
            [0.024862168537947217274823955239, 0.024862168537947217274823955239],
            [0.171614914923835347556304795551, 0.414192542538082326221847602214],
            [0.414192542538082326221847602214, 0.171614914923835347556304795551],
            [0.414192542538082326221847602214, 0.414192542538082326221847602214],
            [0.539412243677190440263092985511, 0.230293878161404779868453507244],
            [0.230293878161404779868453507244, 0.539412243677190440263092985511],
            [0.230293878161404779868453507244, 0.230293878161404779868453507244],
            [0.772160036676532561750285570113, 0.113919981661733719124857214943],
            [0.113919981661733719124857214943, 0.772160036676532561750285570113],
            [0.113919981661733719124857214943, 0.113919981661733719124857214943],
            [0.009085399949835353883572964740, 0.495457300025082323058213517632],
            [0.495457300025082323058213517632, 0.009085399949835353883572964740],
            [0.495457300025082323058213517632, 0.495457300025082323058213517632],
            [0.062277290305886993497083640527, 0.468861354847056503251458179727],
            [0.468861354847056503251458179727, 0.062277290305886993497083640527],
            [0.468861354847056503251458179727, 0.468861354847056503251458179727],
            [0.022076289653624405142446876931, 0.851306504174348550389457672223],
            [0.022076289653624405142446876931, 0.126617206172027096933163647918],
            [0.851306504174348550389457672223, 0.022076289653624405142446876931],
            [0.851306504174348550389457672223, 0.126617206172027096933163647918],
            [0.126617206172027096933163647918, 0.022076289653624405142446876931],
            [0.126617206172027096933163647918, 0.851306504174348550389457672223],
            [0.018620522802520968955913511549, 0.689441970728591295496647976487],
            [0.018620522802520968955913511549, 0.291937506468887771754472382212],
            [0.689441970728591295496647976487, 0.018620522802520968955913511549],
            [0.689441970728591295496647976487, 0.291937506468887771754472382212],
            [0.291937506468887771754472382212, 0.018620522802520968955913511549],
            [0.291937506468887771754472382212, 0.689441970728591295496647976487],
            [0.096506481292159228736516560903, 0.635867859433872768286976979827],
            [0.096506481292159228736516560903, 0.267625659273967961282458816185],
            [0.635867859433872768286976979827, 0.096506481292159228736516560903],
            [0.635867859433872768286976979827, 0.267625659273967961282458816185],
            [0.267625659273967961282458816185, 0.096506481292159228736516560903],
            [0.267625659273967961282458816185, 0.635867859433872768286976979827],
            ])
        self.degree = 13
        return


class Gauss4x4(object):
    '''
    Essentially a product of two 4 point 1D Gauss-Legendre rules.
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    '''
    def __init__(self):
        self.weights = [
            0.04713673637581137,
            0.07077613579259895,
            0.04516809856187617,
            0.01084645180365496,
            0.08837017702418863,
            0.1326884322074010,
            0.08467944903812383,
            0.02033451909634504,
            0.08837017702418863,
            0.1326884322074010,
            0.08467944903812383,
            0.02033451909634504,
            0.04713673637581137,
            0.07077613579259895,
            0.04516809856187617,
            0.01084645180365496,
            ]

        self.points = numpy.array([
            [0.0571041961, 0.06546699455602246],
            [0.2768430136, 0.05021012321401679],
            [0.5835904324, 0.02891208422223085],
            [0.8602401357, 0.009703785123906346],
            [0.0571041961, 0.3111645522491480],
            [0.2768430136, 0.2386486597440242],
            [0.5835904324, 0.1374191041243166],
            [0.8602401357, 0.04612207989200404],
            [0.0571041961, 0.6317312516508520],
            [0.2768430136, 0.4845083266559759],
            [0.5835904324, 0.2789904634756834],
            [0.8602401357, 0.09363778440799593],
            [0.0571041961, 0.8774288093439775],
            [0.2768430136, 0.6729468631859832],
            [0.5835904324, 0.3874974833777692],
            [0.8602401357, 0.1300560791760936],
            ])

        self.degree = 7
        return


class Gauss8x8(object):
    '''
    Essentially a product of two 8 point 1D Gauss-Legendre rules.
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    '''
    def __init__(self):
        self.weights = [
            0.3335674062677772E-03,
            0.7327880811491046E-03,
            0.1033723454167925E-02,
            0.1195112498415193E-02,
            0.1195112498415193E-02,
            0.1033723454167925E-02,
            0.7327880811491046E-03,
            0.3335674062677772E-03,
            0.1806210919443461E-02,
            0.3967923151181667E-02,
            0.5597437146194232E-02,
            0.6471331443180639E-02,
            0.6471331443180639E-02,
            0.5597437146194232E-02,
            0.3967923151181667E-02,
            0.1806210919443461E-02,
            0.4599755803015752E-02,
            0.1010484287526739E-01,
            0.1425461651131868E-01,
            0.1648010431039818E-01,
            0.1648010431039818E-01,
            0.1425461651131868E-01,
            0.1010484287526739E-01,
            0.4599755803015752E-02,
            0.8017259531156730E-02,
            0.1761248886287915E-01,
            0.2484544071087993E-01,
            0.2872441038508419E-01,
            0.2872441038508419E-01,
            0.2484544071087993E-01,
            0.1761248886287915E-01,
            0.8017259531156730E-02,
            0.1073501897357062E-01,
            0.2358292149331603E-01,
            0.3326776143412911E-01,
            0.3846165753898425E-01,
            0.3846165753898425E-01,
            0.3326776143412911E-01,
            0.2358292149331603E-01,
            0.1073501897357062E-01,
            0.1138879740452669E-01,
            0.2501915606814251E-01,
            0.3529381699354388E-01,
            0.4080402900378691E-01,
            0.4080402900378691E-01,
            0.3529381699354388E-01,
            0.2501915606814251E-01,
            0.1138879740452669E-01,
            0.9223845391285393E-02,
            0.2026314273544469E-01,
            0.2858464328177232E-01,
            0.3304739223149761E-01,
            0.3304739223149761E-01,
            0.2858464328177232E-01,
            0.2026314273544469E-01,
            0.9223845391285393E-02,
            0.4509812715921713E-02,
            0.9907253959306707E-02,
            0.1397588340693756E-01,
            0.1615785427783403E-01,
            0.1615785427783403E-01,
            0.1397588340693756E-01,
            0.9907253959306707E-02,
            0.4509812715921713E-02,
            ]

        self.points = numpy.array([
            [0.9553660447100000, 0.8862103848242247E-03],
            [0.9553660447100000, 0.4537789678039195E-02],
            [0.9553660447100000, 0.1058868260117431E-01],
            [0.9553660447100000, 0.1822327082910602E-01],
            [0.9553660447100000, 0.2641068446089399E-01],
            [0.9553660447100000, 0.3404527268882569E-01],
            [0.9553660447100000, 0.4009616561196080E-01],
            [0.9553660447100000, 0.4374774490517578E-01],
            [0.8556337429600001, 0.2866402391985981E-02],
            [0.8556337429600001, 0.1467724979327651E-01],
            [0.8556337429600001, 0.3424855503358430E-01],
            [0.8556337429600001, 0.5894224214571626E-01],
            [0.8556337429600001, 0.8542401489428375E-01],
            [0.8556337429600001, 0.1101177020064157],
            [0.8556337429600001, 0.1296890072467235],
            [0.8556337429600001, 0.1414998546480140],
            [0.7131752428600000, 0.5694926133044352E-02],
            [0.7131752428600000, 0.2916054411712861E-01],
            [0.7131752428600000, 0.6804452564827500E-01],
            [0.7131752428600000, 0.1171055801775613],
            [0.7131752428600000, 0.1697191769624387],
            [0.7131752428600000, 0.2187802314917250],
            [0.7131752428600000, 0.2576642130228714],
            [0.7131752428600000, 0.2811298310069557],
            [0.5451866848000000, 0.9030351006711630E-02],
            [0.5451866848000000, 0.4623939674940125E-01],
            [0.5451866848000000, 0.1078970888004545],
            [0.5451866848000000, 0.1856923986620134],
            [0.5451866848000000, 0.2691209165379867],
            [0.5451866848000000, 0.3469162263995455],
            [0.5451866848000000, 0.4085739184505988],
            [0.5451866848000000, 0.4457829641932884],
            [0.3719321645800000, 0.1247033193690498E-01],
            [0.3719321645800000, 0.6385362269957356E-01],
            [0.3719321645800000, 0.1489989161403976],
            [0.3719321645800000, 0.2564292182833579],
            [0.3719321645800000, 0.3716386171366422],
            [0.3719321645800000, 0.4790689192796024],
            [0.3719321645800000, 0.5642142127204264],
            [0.3719321645800000, 0.6155975034830951],
            [0.2143084794000000, 0.1559996151584746E-01],
            [0.2143084794000000, 0.7987871227492103E-01],
            [0.2143084794000000, 0.1863925811641285],
            [0.2143084794000000, 0.3207842387034378],
            [0.2143084794000000, 0.4649072818965623],
            [0.2143084794000000, 0.5992989394358715],
            [0.2143084794000000, 0.7058128083250790],
            [0.2143084794000000, 0.7700915590841526],
            [0.9132360790000005E-01, 0.1804183496379599E-01],
            [0.9132360790000005E-01, 0.9238218584838476E-01],
            [0.9132360790000005E-01, 0.2155687489628060],
            [0.9132360790000005E-01, 0.3709968314854498],
            [0.9132360790000005E-01, 0.5376795606145502],
            [0.9132360790000005E-01, 0.6931076431371940],
            [0.9132360790000005E-01, 0.8162942062516152],
            [0.9132360790000005E-01, 0.8906345571362040],
            [0.1777991514999999E-01, 0.1950205026019779E-01],
            [0.1777991514999999E-01, 0.9985913490381848E-01],
            [0.1777991514999999E-01, 0.2330157982952792],
            [0.1777991514999999E-01, 0.4010234473667467],
            [0.1777991514999999E-01, 0.5811966374832533],
            [0.1777991514999999E-01, 0.7492042865547208],
            [0.1777991514999999E-01, 0.8823609499461815],
            [0.1777991514999999E-01, 0.9627180345898023],
            ])

        self.degree = 15
        return


class Dunavant(object):
    '''
    Triangle integration schemes from

    D. A. Dunavant,
    High Degree Efficient Symmetrical Gaussian Quadrature Rules for the
    Triangle,
    Article in International Journal for Numerical Methods in Engineering,
    21(6):1129-1148, June 1985,
    10.1002/nme.1620210612.
    '''
    def __init__(self, index):
        if index == 1:
            self.weights = [1.0]
            bary = numpy.array([
                [1.0/3.0, 1.0/3.0, 1.0/3.0]
                ])
            self.degree = 1
        elif index == 2:
            self.weights = 1.0/3.0 * numpy.ones(3)
            bary = self.double_mix(2.0/3.0, 1.0/6.0)
            self.degree = 2
        elif index == 3:
            self.weights = numpy.concatenate([
                numpy.array([-0.5625]),
                25.0 / 48.0 * numpy.ones(3),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.6, 0.2),
                ])
            self.degree = 3
        elif index == 4:
            self.weights = numpy.concatenate([
                0.223381589678011 * numpy.ones(3),
                0.109951743655322 * numpy.ones(3),
                ])
            bary = numpy.concatenate([
                self.double_mix(0.108103018168070, 0.445948490915965),
                self.double_mix(0.816847572980459, 0.091576213509771),
                ])
            self.degree = 4
        elif index == 5:
            self.weights = numpy.concatenate([
                0.225 * numpy.ones(1),
                0.132394152788506 * numpy.ones(3),
                0.125939180544827 * numpy.ones(3),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.059715871789770, 0.4701420641051),
                self.double_mix(0.797426985353087, 0.101286507323456),
                ])
            self.degree = 5
        elif index == 6:
            self.weights = numpy.concatenate([
                0.116786275726379 * numpy.ones(3),
                0.050844906370207 * numpy.ones(3),
                0.082851075618374 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                self.double_mix(0.501426509658179, 0.249286745170910),
                self.double_mix(0.873821971016996, 0.063089014491502),
                self.triple_mix(
                    0.053145049844817, 0.310352451033784, 0.636502499121399
                    ),
                ])
            self.degree = 6
        elif index == 7:
            self.weights = numpy.concatenate([
                -0.149570044467682 * numpy.ones(1),
                0.175615257433208 * numpy.ones(3),
                0.053347235608838 * numpy.ones(3),
                0.077113760890257 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.479308067841920, 0.260345966079040),
                self.double_mix(0.869739794195568, 0.065130102902216),
                self.triple_mix(
                    0.048690315425316, 0.312865496004874, 0.638444188569810
                    ),
                ])
            self.degree = 7
        elif index == 8:
            self.weights = numpy.concatenate([
                0.144315607677787 * numpy.ones(1),
                0.095091634267285 * numpy.ones(3),
                0.103217370534718 * numpy.ones(3),
                0.032458497623198 * numpy.ones(3),
                0.027230314174435 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.081414823414554, 0.459292588292723),
                self.double_mix(0.658861384496480, 0.170569307751760),
                self.double_mix(0.898905543365938, 0.050547228317031),
                self.triple_mix(
                    0.008394777409958, 0.263112829634638, 0.728492392955404
                    ),
                ])
            self.degree = 8
        elif index == 9:
            self.weights = numpy.concatenate([
                0.097135796282799 * numpy.ones(1),
                0.031334700227139 * numpy.ones(3),
                0.077827541004774 * numpy.ones(3),
                0.079647738927210 * numpy.ones(3),
                0.025577675658698 * numpy.ones(3),
                0.043283539377289 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.020634961602525, 0.489682519198738),
                self.double_mix(0.125820817014127, 0.437089591492937),
                self.double_mix(0.623592928761935, 0.188203535619033),
                self.double_mix(0.910540973211095, 0.044729513394453),
                self.triple_mix(
                    0.036838412054736, 0.221962989160766, 0.741198598784498
                    ),
                ])
            self.degree = 9
        elif index == 10:
            self.weights = numpy.concatenate([
                0.090817990382754 * numpy.ones(1),
                0.036725957756467 * numpy.ones(3),
                0.045321059435528 * numpy.ones(3),
                0.072757916845420 * numpy.ones(6),
                0.028327242531057 * numpy.ones(6),
                0.009421666963733 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.028844733232685, 0.485577633383657),
                self.double_mix(0.781036849029926, 0.109481575485037),
                self.triple_mix(
                    0.141707219414880, 0.307939838764121, 0.550352941820999
                    ),
                self.triple_mix(
                    0.025003534762686, 0.246672560639903, 0.728323904597411
                    ),
                self.triple_mix(
                    0.009540815400299, 0.066803251012200, 0.923655933587500
                    ),
                ])
            self.degree = 10
        elif index == 11:
            self.weights = numpy.concatenate([
                0.000927006328961 * numpy.ones(3),
                0.077149534914813 * numpy.ones(3),
                0.059322977380774 * numpy.ones(3),
                0.036184540503418 * numpy.ones(3),
                0.013659731002678 * numpy.ones(3),
                0.052337111962204 * numpy.ones(6),
                0.020707659639141 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                self.double_mix(-0.069222096541517, 0.534611048270758),
                self.double_mix(0.202061394068290, 0.398969302965855),
                self.double_mix(0.593380199137435, 0.203309900431282),
                self.double_mix(0.761298175434837, 0.119350912282581),
                self.double_mix(0.935270103777448, 0.032364948111276),
                self.triple_mix(
                    0.050178138310495, 0.356620648261293, 0.593201213428213
                    ),
                self.triple_mix(
                    0.021022016536166, 0.171488980304042, 0.807489003159792
                    ),
                ])
            self.degree = 11
        elif index == 12:
            self.weights = numpy.concatenate([
                0.025731066440455 * numpy.ones(3),
                0.043692544538038 * numpy.ones(3),
                0.062858224217885 * numpy.ones(3),
                0.034796112930709 * numpy.ones(3),
                0.006166261051559 * numpy.ones(3),
                0.040371557766381 * numpy.ones(6),
                0.022356773202303 * numpy.ones(6),
                0.017316231108659 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                self.double_mix(0.023565220452390, 0.488217389773805),
                self.double_mix(0.120551215411079, 0.439724392294460),
                self.double_mix(0.457579229975768, 0.271210385012116),
                self.double_mix(0.744847708916828, 0.127576145541586),
                self.double_mix(0.957365299093579, 0.021317350453210),
                self.triple_mix(
                    0.115343494534698, 0.275713269685514, 0.608943235779788
                    ),
                self.triple_mix(
                    0.022838332222257, 0.281325580989940, 0.695836086787803
                    ),
                self.triple_mix(
                    0.025734050548330, 0.116251915907597, 0.858014033544073
                    ),
                ])
            self.degree = 12
        elif index == 13:
            self.weights = numpy.concatenate([
                0.052520923400802 * numpy.ones(1),
                0.011280145209330 * numpy.ones(3),
                0.031423518362454 * numpy.ones(3),
                0.047072502504194 * numpy.ones(3),
                0.047363586536355 * numpy.ones(3),
                0.031167529045794 * numpy.ones(3),
                0.007975771465074 * numpy.ones(3),
                0.036848402728732 * numpy.ones(6),
                0.017401463303822 * numpy.ones(6),
                0.015521786839045 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.009903630120591, 0.495048184939705),
                self.double_mix(0.062566729780852, 0.468716635109574),
                self.double_mix(0.170957326397447, 0.414521336801277),
                self.double_mix(0.541200855914337, 0.229399572042831),
                self.double_mix(0.771151009607340, 0.114424495196330),
                self.double_mix(0.950377217273082, 0.024811391363459),
                self.triple_mix(
                    0.094853828379579, 0.268794997058761, 0.636351174561660
                    ),
                self.triple_mix(
                    0.018100773278807, 0.291730066734288, 0.690169159986905
                    ),
                self.triple_mix(
                    0.022233076674090, 0.126357385491669, 0.851409537834241
                    ),
                ])
            self.degree = 13
        elif index == 14:
            self.weights = numpy.concatenate([
                0.021883581369429 * numpy.ones(3),
                0.032788353544125 * numpy.ones(3),
                0.051774104507292 * numpy.ones(3),
                0.042162588736993 * numpy.ones(3),
                0.014433699669777 * numpy.ones(3),
                0.004923403602400 * numpy.ones(3),
                0.024665753212564 * numpy.ones(6),
                0.038571510787061 * numpy.ones(6),
                0.014436308113534 * numpy.ones(6),
                0.005010228838501 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                self.double_mix(0.022072179275643, 0.488963910362179),
                self.double_mix(0.164710561319092, 0.417644719340454),
                self.double_mix(0.453044943382323, 0.273477528308839),
                self.double_mix(0.645588935174913, 0.177205532412543),
                self.double_mix(0.876400233818255, 0.061799883090873),
                self.double_mix(0.961218077502598, 0.019390961248701),
                self.triple_mix(
                    0.057124757403648, 0.172266687821356, 0.770608554774996
                    ),
                self.triple_mix(
                    0.092916249356972, 0.336861459796345, 0.570222290846683
                    ),
                self.triple_mix(
                    0.014646950055654, 0.298372882136258, 0.686980167808088
                    ),
                self.triple_mix(
                    0.001268330932872, 0.118974497696957, 0.879757171370171
                    ),
                ])
            self.degree = 14
        elif index == 15:
            self.weights = numpy.concatenate([
                0.001916875642849 * numpy.ones(3),
                0.044249027271145 * numpy.ones(3),
                0.051186548718852 * numpy.ones(3),
                0.023687735870688 * numpy.ones(3),
                0.013289775690021 * numpy.ones(3),
                0.004748916608192 * numpy.ones(3),
                0.038550072599593 * numpy.ones(6),
                0.027215814320624 * numpy.ones(6),
                0.002182077366797 * numpy.ones(6),
                0.021505319847731 * numpy.ones(6),
                0.007673942631049 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                self.double_mix(-0.013945833716486, 0.506972916858243),
                self.double_mix(0.137187291433955, 0.431406354283023),
                self.double_mix(0.444612710305711, 0.277693644847144),
                self.double_mix(0.747070217917492, 0.126464891041254),
                self.double_mix(0.858383228050628, 0.070808385974686),
                self.double_mix(0.962069659517853, 0.018965170241073),
                self.triple_mix(
                    0.133734161966621, 0.261311371140087, 0.604954466893291
                    ),
                self.triple_mix(
                    0.036366677396917, 0.575586555512814, 0.388046767090269
                    ),
                self.triple_mix(
                    -0.010174883126571, 0.285712220049916, 0.724462663076655
                    ),
                self.triple_mix(
                    0.036843869875878, 0.215599664072284, 0.747556466051838
                    ),
                self.triple_mix(
                    0.012459809331199, 0.103575616576386, 0.883964574092416
                    ),
                ])
            self.degree = 15
        elif index == 16:
            self.weights = numpy.concatenate([
                0.046875697427642 * numpy.ones(1),
                0.006405878578585 * numpy.ones(3),
                0.041710296739387 * numpy.ones(3),
                0.026891484250064 * numpy.ones(3),
                0.042132522761650 * numpy.ones(3),
                0.030000266842773 * numpy.ones(3),
                0.014200098925024 * numpy.ones(3),
                0.003582462351273 * numpy.ones(3),
                0.032773147460627 * numpy.ones(6),
                0.015298306248441 * numpy.ones(6),
                0.002386244192839 * numpy.ones(6),
                0.019084792755899 * numpy.ones(6),
                0.006850054546542 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.005238916103123, 0.497380541948438),
                self.double_mix(0.173061122901295, 0.413469438549352),
                self.double_mix(0.059082801866017, 0.470458599066991),
                self.double_mix(0.518892500060958, 0.240553749969521),
                self.double_mix(0.704068411554854, 0.147965794222573),
                self.double_mix(0.849069624685052, 0.075465187657474),
                self.double_mix(0.966807194753950, 0.016596402623025),
                self.triple_mix(
                    0.103575692245252, 0.296555596579887, 0.599868711174861
                    ),
                self.triple_mix(
                    0.020083411655416, 0.337723063403079, 0.642193524941505
                    ),
                self.triple_mix(
                    -0.004341002614139, 0.204748281642812, 0.799592720971327
                    ),
                self.triple_mix(
                    0.041941786468010, 0.189358492130623, 0.768699721401368
                    ),
                self.triple_mix(
                    0.014317320230681, 0.085283615682657, 0.900399064086661
                    ),
                ])
            self.degree = 16
        elif index == 17:
            self.weights = numpy.concatenate([
                0.033437199290803 * numpy.ones(1),
                0.005093415440507 * numpy.ones(3),
                0.014670864527638 * numpy.ones(3),
                0.024350878353672 * numpy.ones(3),
                0.031107550868969 * numpy.ones(3),
                0.031257111218620 * numpy.ones(3),
                0.024815654339665 * numpy.ones(3),
                0.014056073070557 * numpy.ones(3),
                0.003194676173779 * numpy.ones(3),
                0.008119655318993 * numpy.ones(6),
                0.026805742283163 * numpy.ones(6),
                0.018459993210822 * numpy.ones(6),
                0.008476868534328 * numpy.ones(6),
                0.018292796770025 * numpy.ones(6),
                0.006665632004165 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.005658918886452, 0.497170540556774),
                self.double_mix(0.035647354750751, 0.482176322624625),
                self.double_mix(0.099520061958437, 0.450239969020782),
                self.double_mix(0.199467521245206, 0.400266239377397),
                self.double_mix(0.495717464058095, 0.252141267970953),
                self.double_mix(0.675905990683077, 0.162047004658461),
                self.double_mix(0.848248235478508, 0.075875882260746),
                self.double_mix(0.968690546064356, 0.015654726967822),
                self.triple_mix(
                    0.010186928826919, 0.334319867363658, 0.655493203809423
                    ),
                self.triple_mix(
                    0.135440871671036, 0.292221537796944, 0.572337590532020
                    ),
                self.triple_mix(
                    0.054423924290583, 0.319574885423190, 0.626001190286228
                    ),
                self.triple_mix(
                    0.012868560833637, 0.190704224192292, 0.796427214974071
                    ),
                self.triple_mix(
                    0.067165782413524, 0.180483211648746, 0.752351005937729
                    ),
                self.triple_mix(
                    0.014663182224828, 0.080711313679564, 0.904625504095608
                    ),
                ])
            self.degree = 17
        # elif index == 18:
        #     self.weights = numpy.concatenate([
        #         0.030809939937647 * numpy.ones(1),
        #         0.009072436679404 * numpy.ones(3),
        #         0.018761316939594 * numpy.ones(3),
        #         0.019441097985477 * numpy.ones(3),
        #         0.027753948610810 * numpy.ones(3),
        #         0.032256225351457 * numpy.ones(3),
        #         0.025074032616922 * numpy.ones(3),
        #         0.015271927971832 * numpy.ones(3),
        #         0.006793922022963 * numpy.ones(3),
        #         -0.002223098729920 * numpy.ones(3),
        #         0.006331914076406 * numpy.ones(6),
        #         0.027257538049138 * numpy.ones(6),
        #         0.017676785649465 * numpy.ones(6),
        #         0.018379484638070 * numpy.ones(6),
        #         0.008104732808192 * numpy.ones(6),
        #         0.007634129070725 * numpy.ones(6),
        #         0.000046187660794 * numpy.ones(6),
        #         ])
        #     bary = numpy.concatenate([
        #         numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
        #         self.double_mix(0.013310382738157, 0.493344808630921),
        #         self.double_mix(0.061578811516086, 0.469210594241957),
        #         self.double_mix(0.127437208225989, 0.436261395887006),
        #         self.double_mix(0.210307658653168, 0.394846170673416),
        #         self.double_mix(0.500410862393686, 0.249794568803157),
        #         self.double_mix(0.677135612512315, 0.161432193743843),
        #         self.double_mix(0.846803545029257, 0.076598227485371),
        #         self.double_mix(0.951495121293100, 0.024252439353450),
        #         self.double_mix(0.913707265566071, 0.043146367216965),
        #         self.triple_mix(
        #             0.008430536202420, 0.358911494940944, 0.632657968856636
        #             ),
        #         self.triple_mix(
        #             0.131186551737188, 0.294402476751957, 0.574410971510855
        #             ),
        #         self.triple_mix(
        #             0.050203151565675, 0.325017801641814, 0.624779046792512
        #             ),
        #         self.triple_mix(
        #             0.066329263810916, 0.184737559666046, 0.748933176523037
        #             ),
        #         self.triple_mix(
        #             0.011996194566236, 0.218796800013321, 0.769207005420443
        #             ),
        #         self.triple_mix(
        #             0.014858100590125, 0.101179597136408, 0.883962302273467
        #             ),
        #         self.triple_mix(
        #             -0.035222015287949, 0.020874755282586, 1.014347260005363
        #             ),
        #         ])

        #     self.degree = 18
        elif index == 19:
            self.weights = numpy.concatenate([
                0.032906331388919 * numpy.ones(1),
                #
                0.010330731891272 * numpy.ones(3),
                0.022387247263016 * numpy.ones(3),
                0.030266125869468 * numpy.ones(3),
                0.030490967802198 * numpy.ones(3),
                0.024159212741641 * numpy.ones(3),
                0.016050803586801 * numpy.ones(3),
                0.008084580261784 * numpy.ones(3),
                0.002079362027485 * numpy.ones(3),
                #
                0.003884876904981 * numpy.ones(6),
                0.025574160612022 * numpy.ones(6),
                0.008880903573338 * numpy.ones(6),
                0.016124546761731 * numpy.ones(6),
                0.002491941817491 * numpy.ones(6),
                0.018242840118951 * numpy.ones(6),
                0.010258563736199 * numpy.ones(6),
                0.003799928855302 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(0.020780025853987, 0.489609987073006),
                self.double_mix(0.090926214604215, 0.454536892697893),
                self.double_mix(0.197166638701138, 0.401416680649431),
                self.double_mix(0.488896691193805, 0.255551654403098),
                self.double_mix(0.645844115695741, 0.177077942152130),
                self.double_mix(0.779877893544096, 0.110061053227952),
                self.double_mix(0.888942751496321, 0.055528624251840),
                self.double_mix(0.974756272445543, 0.012621863777229),
                self.triple_mix(
                    0.003611417848412, 0.395754787356943, 0.600633794794645
                    ),
                self.triple_mix(
                    0.134466754530780, 0.307929983880436, 0.557603261588784
                    ),
                self.triple_mix(
                    0.014446025776115, 0.264566948406520, 0.720987025817365
                    ),
                self.triple_mix(
                    0.046933578838178, 0.358539352205951, 0.594527068955871
                    ),
                self.triple_mix(
                    0.002861120350567, 0.157807405968595, 0.839331473680839
                    ),
                self.triple_mix(
                    0.223861424097916, 0.075050596975911, 0.701087978926173
                    ),
                self.triple_mix(
                    0.034647074816760, 0.142421601113383, 0.822931324069857
                    ),
                self.triple_mix(
                    0.010161119296278, 0.065494628082938, 0.924344252620784
                    ),
                ])
            self.degree = 19
        elif index == 20:
            self.weights = numpy.concatenate([
                0.033057055541624 * numpy.ones(1),
                #
                0.000867019185663 * numpy.ones(3),
                0.011660052716448 * numpy.ones(3),
                0.022876936356421 * numpy.ones(3),
                0.030448982673938 * numpy.ones(3),
                0.030624891725355 * numpy.ones(3),
                0.024368057676800 * numpy.ones(3),
                0.015997432032024 * numpy.ones(3),
                0.007698301815602 * numpy.ones(3),
                -0.000632060497488 * numpy.ones(3),
                0.001751134301193 * numpy.ones(3),
                #
                0.016465839189576 * numpy.ones(6),
                0.004839033540485 * numpy.ones(6),
                0.025804906534650 * numpy.ones(6),
                0.008471091054441 * numpy.ones(6),
                0.018354914106280 * numpy.ones(6),
                0.000704404677908 * numpy.ones(6),
                0.010112684927462 * numpy.ones(6),
                0.003573909385950 * numpy.ones(6),
                ])
            bary = numpy.concatenate([
                numpy.array([[1.0/3.0, 1.0/3.0, 1.0/3.0]]),
                self.double_mix(-0.001900928704400, 0.500950464352200),
                self.double_mix(0.023574084130543, 0.488212957934729),
                self.double_mix(0.089726636099435, 0.455136681950283),
                self.double_mix(0.196007481363421, 0.401996259318289),
                self.double_mix(0.488214180481157, 0.255892909759421),
                self.double_mix(0.647023488009788, 0.176488255995106),
                self.double_mix(0.791658289326483, 0.104170855336758),
                self.double_mix(0.893862072318140, 0.053068963840930),
                self.double_mix(0.916762569607942, 0.041618715196029),
                self.double_mix(0.976836157186356, 0.011581921406822),
                self.triple_mix(
                    0.048741583664839, 0.344855770229001, 0.606402646106160
                    ),
                self.triple_mix(
                    0.006314115948605, 0.377843269594854, 0.615842614456541
                    ),
                self.triple_mix(
                    0.134316520547348, 0.306635479062357, 0.559048000390295
                    ),
                self.triple_mix(
                    0.013973893962392, 0.249419362774742, 0.736606743262866
                    ),
                self.triple_mix(
                    0.075549132909764, 0.212775724802802, 0.711675142287434
                    ),
                self.triple_mix(
                    -0.008368153208227, 0.146965436053239, 0.861402717154987
                    ),
                self.triple_mix(
                    0.026686063258714, 0.137726978828923, 0.835586957912363
                    ),
                self.triple_mix(
                    0.010547719294141, 0.059696109149007, 0.929756171556853
                    ),
                ])
            self.degree = 20
        else:
            raise ValueError('Illegal Dunavant index')

        # convert barycentric coordinates to reference triangle
        self.points = bary[:, [1, 2]]
        return

    def double_mix(self, a, b):
        return numpy.array([
            [a, b, b],
            [b, a, b],
            [b, b, a],
            ])

    def triple_mix(self, a, b, c):
        return numpy.array([
            [a, b, c],
            [c, a, b],
            [b, c, a],
            [a, c, b],
            [b, a, c],
            [c, b, a],
            ])
