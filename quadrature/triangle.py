# -*- coding: utf-8 -*-
#
import numpy


def volume(triangle):
    # It doesn't matter much which cross product we take for computing the
    # triangle volumes; deliberately take
    #
    #   <e0 x e1, e0 x e1> = <e0, e0> <e1, e1> - <e0, e1>^2.
    #
    e0 = triangle[1] - triangle[0]
    e1 = triangle[2] - triangle[1]
    e0_dot_e0 = numpy.dot(e0, e0)
    e0_dot_e1 = numpy.dot(e0, e1)
    e1_dot_e1 = numpy.dot(e1, e1)
    return 0.5 * numpy.sqrt(e0_dot_e0 * e1_dot_e1 - e0_dot_e1**2)


def _transform_to_unit_triangle(f, triangle):
    '''Transformation

      x = x0 * N0(xi, eta) + x1 * N1(xi, eta) + x2 * N2(xi, eta)

    with

      N0(xi, eta) = 1 - xi - eta,
      N1(xi, eta) = xi,
      N2(xi, eta) = eta.
    '''
    return lambda xi: f(
        + triangle[0] * (1.0 - xi[0] - xi[1])
        + triangle[1] * xi[0]
        + triangle[2] * xi[1]
        )


def integrate(f, triangle, rule):
    g = _transform_to_unit_triangle(f, triangle)
    out = 0.0
    for point, weight in zip(rule.points, rule.weights):
        out += weight * g(point)
    return volume(triangle) * out


class Centroid(object):
    def __init__(self):
        self.weights = [1.0]
        self.points = numpy.array([
            [1.0/3.0, 1.0/3.0]
            ])
        self.degree = 1
        return


class Vertex(object):
    def __init__(self):
        self.weights = [1.0/3.0, 1.0/3.0, 1.0/3.0]
        self.points = numpy.array([
            [0.0, 0.0],
            [1.0, 0.0],
            [0.0, 1.0],
            ])
        self.degree = 1
        return


class SevenPoint(object):
    def __init__(self):
        self.weights = [
            0.45,
            0.05,
            0.05,
            0.05,
            2.0 / 15.0,
            2.0 / 15.0,
            2.0 / 15.0
            ]
        self.points = numpy.array([
            [1.0/3.0, 1.0/3.0],
            [1.0, 0.0],
            [0.0, 1.0],
            [0.0, 0.0],
            [0.0, 0.5],
            [0.5, 0.0],
            [0.5, 0.5],
            ])
        self.degree = 3
        return


class Strang1(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [1.0/3.0, 1.0/3.0, 1.0/3.0]
        self.points = numpy.array([
            [2.0/3.0, 1.0/6.0],
            [1.0/6.0, 2.0/3.0],
            [1.0/6.0, 1.0/6.0],
            ])
        self.degree = 2
        return


class Strang2(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [1.0/3.0, 1.0/3.0, 1.0/3.0]
        self.points = numpy.array([
            [0.5, 0.0],
            [0.5, 0.5],
            [0.0, 0.5],
            ])
        self.degree = 2
        return


class Strang3(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            -0.5625,
            25.0 / 48.0,
            25.0 / 48.0,
            25.0 / 48.0
            ]

        self.points = numpy.array([
            [1.0/3.0, 1.0/3.0],
            [0.6, 0.2],
            [0.2, 0.6],
            [0.2, 0.2],
            ])
        self.degree = 3
        return


class Strang4(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            1.0/6.0,
            1.0/6.0,
            1.0/6.0,
            1.0/6.0,
            1.0/6.0,
            1.0/6.0,
            ]

        self.points = numpy.array([
            [0.659027622374092, 0.231933368553031],
            [0.659027622374092, 0.109039009072877],
            [0.231933368553031, 0.659027622374092],
            [0.231933368553031, 0.109039009072877],
            [0.109039009072877, 0.659027622374092],
            [0.109039009072877, 0.231933368553031],
            ])
        self.degree = 3
        return


class Strang5(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            0.109951743655322,
            0.109951743655322,
            0.109951743655322,
            0.223381589678011,
            0.223381589678011,
            0.223381589678011,
            ]

        self.points = numpy.array([
            [0.816847572980459, 0.091576213509771],
            [0.091576213509771, 0.816847572980459],
            [0.091576213509771, 0.091576213509771],
            [0.108103018168070, 0.445948490915965],
            [0.445948490915965, 0.108103018168070],
            [0.445948490915965, 0.445948490915965],
            ])
        self.degree = 4
        return


class Strang6(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            0.375,
            5.0 / 48.0,
            5.0 / 48.0,
            5.0 / 48.0,
            5.0 / 48.0,
            5.0 / 48.0,
            5.0 / 48.0,
            ]

        self.points = numpy.array([
            [0.333333333333333, 0.333333333333333],
            [0.736712498968435, 0.237932366472434],
            [0.736712498968435, 0.025355134551932],
            [0.237932366472434, 0.736712498968435],
            [0.237932366472434, 0.025355134551932],
            [0.025355134551932, 0.736712498968435],
            [0.025355134551932, 0.237932366472434],
            ])
        self.degree = 4
        return


class Strang7(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            0.225,
            0.12593918054482717,
            0.12593918054482717,
            0.12593918054482717,
            0.13239415278850616,
            0.13239415278850616,
            0.13239415278850616,
            ]

        self.points = numpy.array([
            [0.33333333333333333, 0.33333333333333333],
            [0.79742698535308720, 0.10128650732345633],
            [0.10128650732345633, 0.79742698535308720],
            [0.10128650732345633, 0.10128650732345633],
            [0.05971587178976981, 0.47014206410511505],
            [0.47014206410511505, 0.05971587178976981],
            [0.47014206410511505, 0.47014206410511505],
            ])
        self.degree = 5
        return


class Strang8(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            0.205950504760887,
            0.205950504760887,
            0.205950504760887,
            0.063691414286223,
            0.063691414286223,
            0.063691414286223,
            0.063691414286223,
            0.063691414286223,
            0.063691414286223,
            ]

        self.points = numpy.array([
            [0.124949503233232, 0.437525248383384],
            [0.437525248383384, 0.124949503233232],
            [0.437525248383384, 0.437525248383384],
            [0.797112651860071, 0.165409927389841],
            [0.797112651860071, 0.037477420750088],
            [0.165409927389841, 0.797112651860071],
            [0.165409927389841, 0.037477420750088],
            [0.037477420750088, 0.797112651860071],
            [0.037477420750088, 0.165409927389841],
            ])
        self.degree = 5
        return


class Strang9(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            0.050844906370207,
            0.050844906370207,
            0.050844906370207,
            0.116786275726379,
            0.116786275726379,
            0.116786275726379,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            ]

        self.points = numpy.array([
            [0.873821971016996, 0.063089014491502],
            [0.063089014491502, 0.873821971016996],
            [0.063089014491502, 0.063089014491502],
            [0.501426509658179, 0.249286745170910],
            [0.249286745170910, 0.501426509658179],
            [0.249286745170910, 0.249286745170910],
            [0.636502499121399, 0.310352451033785],
            [0.636502499121399, 0.053145049844816],
            [0.310352451033785, 0.636502499121399],
            [0.310352451033785, 0.053145049844816],
            [0.053145049844816, 0.636502499121399],
            [0.053145049844816, 0.310352451033785],
            ])
        self.degree = 6
        return


class Strang10(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Gilbert Strang, George Fix,
    An Analysis of the Finite Element Method,
    Cambridge, 1973,
    ISBN: 096140888X,
    LC: TA335.S77.
    '''
    def __init__(self):
        self.weights = [
            -0.149570044467670,
            0.175615257433204,
            0.175615257433204,
            0.175615257433204,
            0.053347235608839,
            0.053347235608839,
            0.053347235608839,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            ]

        self.points = numpy.array([
            [0.333333333333333, 0.333333333333333],
            [0.479308067841923, 0.260345966079038],
            [0.260345966079038, 0.479308067841923],
            [0.260345966079038, 0.260345966079038],
            [0.869739794195568, 0.065130102902216],
            [0.065130102902216, 0.869739794195568],
            [0.065130102902216, 0.065130102902216],
            [0.638444188569809, 0.312865496004875],
            [0.638444188569809, 0.048690315425316],
            [0.312865496004875, 0.638444188569809],
            [0.312865496004875, 0.048690315425316],
            [0.048690315425316, 0.638444188569809],
            [0.048690315425316, 0.312865496004875],
            ])
        self.degree = 7
        return


class Toms584_19(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Laurie, D. P.,
    Algorithm 584: CUBTRI: Automatic Cubature over a Triangle,
    ACM Trans. Math. Softw.,
    June 1982,
    <http://dl.acm.org/citation.cfm?id=356001>.
    '''
    def __init__(self):
        self.weights = [
            0.0378610912003147,
            0.0376204254131829,
            0.0376204254131829,
            0.0376204254131829,
            0.0783573522441174,
            0.0783573522441174,
            0.0783573522441174,
            0.1162714796569659,
            0.1162714796569659,
            0.1162714796569659,
            0.0134442673751655,
            0.0134442673751655,
            0.0134442673751655,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            0.0375097224552317,
            ]

        self.points = numpy.array([
            [0.3333333333333333, 0.3333333333333333],
            [0.7974269853530872, 0.1012865073234563],
            [0.1012865073234563, 0.7974269853530872],
            [0.1012865073234563, 0.1012865073234563],
            [0.0597158717897698, 0.4701420641051151],
            [0.4701420641051151, 0.0597158717897698],
            [0.4701420641051151, 0.4701420641051151],
            [0.5357953464498992, 0.2321023267750504],
            [0.2321023267750504, 0.5357953464498992],
            [0.2321023267750504, 0.2321023267750504],
            [0.9410382782311209, 0.0294808608844396],
            [0.0294808608844396, 0.9410382782311209],
            [0.0294808608844396, 0.0294808608844396],
            [0.7384168123405100, 0.2321023267750504],
            [0.7384168123405100, 0.0294808608844396],
            [0.2321023267750504, 0.7384168123405100],
            [0.2321023267750504, 0.0294808608844396],
            [0.0294808608844396, 0.7384168123405100],
            [0.0294808608844396, 0.2321023267750504],
            ])
        self.degree = 8
        return


class Toms612_19(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    E. de Doncker and I. Robinson,
    Algorithm 612: TRIEX: Integration Over a TRIangle Using Nonlinear
    EXtrapolation,
    ACM Trans. Math. Softw.,
    March 1984,
    <http://dl.acm.org/citation.cfm?id=356070&CFID=836775288&CFTOKEN=89206835>.
    '''
    def __init__(self):
        self.weights = [
            9.71357962827961025E-002,
            3.13347002271398278E-002,
            3.13347002271398278E-002,
            3.13347002271398278E-002,
            7.78275410047754301E-002,
            7.78275410047754301E-002,
            7.78275410047754301E-002,
            7.96477389272090969E-002,
            7.96477389272090969E-002,
            7.96477389272090969E-002,
            2.55776756586981006E-002,
            2.55776756586981006E-002,
            2.55776756586981006E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            4.32835393772893970E-002,
            ]

        self.points = numpy.array([
            [0.33333333333333331, 0.33333333333333331],
            [2.06349616025259287E-002, 0.48968251919873701],
            [0.48968251919873701, 2.06349616025259287E-002],
            [0.48968251919873701, 0.48968251919873701],
            [0.12582081701412900, 0.43708959149293553],
            [0.43708959149293553, 0.12582081701412900],
            [0.43708959149293553, 0.43708959149293553],
            [0.62359292876193562, 0.18820353561903219],
            [0.18820353561903219, 0.62359292876193562],
            [0.18820353561903219, 0.18820353561903219],
            [0.91054097321109406, 4.47295133944529688E-002],
            [4.47295133944529688E-002, 0.91054097321109406],
            [4.47295133944529688E-002, 4.47295133944529688E-002],
            [0.74119859878449801, 3.68384120547362581E-002],
            [0.74119859878449801, 0.22196298916076573],
            [3.68384120547362581E-002, 0.74119859878449801],
            [3.68384120547362581E-002, 0.22196298916076573],
            [0.22196298916076573, 0.74119859878449801],
            [0.22196298916076573, 3.68384120547362581E-002],
            ])
        self.degree = 9
        return


class Toms612_28(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    E. de Doncker and I. Robinson,
    Algorithm 612: TRIEX: Integration Over a TRIangle Using Nonlinear
    EXtrapolation,
    ACM Trans. Math. Softw.,
    March 1984,
    <http://dl.acm.org/citation.cfm?id=356070&CFID=836775288&CFTOKEN=89206835>.
    '''
    def __init__(self):
        self.weights = [
            0.08797730116222190,
            0.008744311553736190,
            0.008744311553736190,
            0.008744311553736190,
            0.03808157199393533,
            0.03808157199393533,
            0.03808157199393533,
            0.01885544805613125,
            0.01885544805613125,
            0.01885544805613125,
            0.07215969754474100,
            0.07215969754474100,
            0.07215969754474100,
            0.06932913870553720,
            0.06932913870553720,
            0.06932913870553720,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.04105631542928860,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            0.007362383783300573,
            ]

        self.points = numpy.array([
            [0.33333333333333333, 0.333333333333333333],
            [0.9480217181434233, 0.02598914092828833],
            [0.02598914092828833, 0.9480217181434233],
            [0.02598914092828833, 0.02598914092828833],
            [0.8114249947041546, 0.09428750264792270],
            [0.09428750264792270, 0.8114249947041546],
            [0.09428750264792270, 0.09428750264792270],
            [0.01072644996557060, 0.4946367750172147],
            [0.4946367750172147, 0.01072644996557060],
            [0.4946367750172147, 0.4946367750172147],
            [0.5853132347709715, 0.2073433826145142],
            [0.2073433826145142, 0.5853132347709715],
            [0.2073433826145142, 0.2073433826145142],
            [0.1221843885990187, 0.4389078057004907],
            [0.4389078057004907, 0.1221843885990187],
            [0.4389078057004907, 0.4389078057004907],
            [0.6779376548825902, 0.04484167758913055],
            [0.6779376548825902, 0.27722066752827925],
            [0.04484167758913055, 0.6779376548825902],
            [0.04484167758913055, 0.27722066752827925],
            [0.27722066752827925, 0.6779376548825902],
            [0.27722066752827925, 0.04484167758913055],
            [0.8588702812826364, 0.00000000000000000],
            [0.8588702812826364, 0.1411297187173636],
            [0.0000000000000000, 0.8588702812826364],
            [0.0000000000000000, 0.1411297187173636],
            [0.1411297187173636, 0.8588702812826364],
            [0.1411297187173636, 0.0000000000000000],
            ])
        self.degree = 11
        return


class Toms706_37(object):
    '''
    See
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    and

    Berntsen and Espelid,
    Algorithm 706: DCUTRI: An Algorithm for Adaptive Cubature over a Collection
    of Triangles,
    ACM Trans. Math. Softw.,
    Sept. 1992,
    10.1145/131766.131772,
    <http://dl.acm.org/citation.cfm?id=131772>.
    '''
    def __init__(self):
        self.weights = [
            0.051739766065744133555179145422,
            0.008007799555564801597804123460,
            0.008007799555564801597804123460,
            0.008007799555564801597804123460,
            0.046868898981821644823226732071,
            0.046868898981821644823226732071,
            0.046868898981821644823226732071,
            0.046590940183976487960361770070,
            0.046590940183976487960361770070,
            0.046590940183976487960361770070,
            0.031016943313796381407646220131,
            0.031016943313796381407646220131,
            0.031016943313796381407646220131,
            0.010791612736631273623178240136,
            0.010791612736631273623178240136,
            0.010791612736631273623178240136,
            0.032195534242431618819414482205,
            0.032195534242431618819414482205,
            0.032195534242431618819414482205,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.015445834210701583817692900053,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.017822989923178661888748319485,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            0.037038683681384627918546472190,
            ]

        self.points = numpy.array([
            [0.333333333333333333333333333333, 0.333333333333333333333333333333],
            [0.950275662924105565450352089520, 0.024862168537947217274823955239],
            [0.024862168537947217274823955239, 0.950275662924105565450352089520],
            [0.024862168537947217274823955239, 0.024862168537947217274823955239],
            [0.171614914923835347556304795551, 0.414192542538082326221847602214],
            [0.414192542538082326221847602214, 0.171614914923835347556304795551],
            [0.414192542538082326221847602214, 0.414192542538082326221847602214],
            [0.539412243677190440263092985511, 0.230293878161404779868453507244],
            [0.230293878161404779868453507244, 0.539412243677190440263092985511],
            [0.230293878161404779868453507244, 0.230293878161404779868453507244],
            [0.772160036676532561750285570113, 0.113919981661733719124857214943],
            [0.113919981661733719124857214943, 0.772160036676532561750285570113],
            [0.113919981661733719124857214943, 0.113919981661733719124857214943],
            [0.009085399949835353883572964740, 0.495457300025082323058213517632],
            [0.495457300025082323058213517632, 0.009085399949835353883572964740],
            [0.495457300025082323058213517632, 0.495457300025082323058213517632],
            [0.062277290305886993497083640527, 0.468861354847056503251458179727],
            [0.468861354847056503251458179727, 0.062277290305886993497083640527],
            [0.468861354847056503251458179727, 0.468861354847056503251458179727],
            [0.022076289653624405142446876931, 0.851306504174348550389457672223],
            [0.022076289653624405142446876931, 0.126617206172027096933163647918],
            [0.851306504174348550389457672223, 0.022076289653624405142446876931],
            [0.851306504174348550389457672223, 0.126617206172027096933163647918],
            [0.126617206172027096933163647918, 0.022076289653624405142446876931],
            [0.126617206172027096933163647918, 0.851306504174348550389457672223],
            [0.018620522802520968955913511549, 0.689441970728591295496647976487],
            [0.018620522802520968955913511549, 0.291937506468887771754472382212],
            [0.689441970728591295496647976487, 0.018620522802520968955913511549],
            [0.689441970728591295496647976487, 0.291937506468887771754472382212],
            [0.291937506468887771754472382212, 0.018620522802520968955913511549],
            [0.291937506468887771754472382212, 0.689441970728591295496647976487],
            [0.096506481292159228736516560903, 0.635867859433872768286976979827],
            [0.096506481292159228736516560903, 0.267625659273967961282458816185],
            [0.635867859433872768286976979827, 0.096506481292159228736516560903],
            [0.635867859433872768286976979827, 0.267625659273967961282458816185],
            [0.267625659273967961282458816185, 0.096506481292159228736516560903],
            [0.267625659273967961282458816185, 0.635867859433872768286976979827],
            ])
        self.degree = 13
        return


class Gauss4x4(object):
    '''
    Essentially a product of two 4 point 1D Gauss-Legendre rules.
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    '''
    def __init__(self):
        self.weights = [
            0.04713673637581137,
            0.07077613579259895,
            0.04516809856187617,
            0.01084645180365496,
            0.08837017702418863,
            0.1326884322074010,
            0.08467944903812383,
            0.02033451909634504,
            0.08837017702418863,
            0.1326884322074010,
            0.08467944903812383,
            0.02033451909634504,
            0.04713673637581137,
            0.07077613579259895,
            0.04516809856187617,
            0.01084645180365496,
            ]

        self.points = numpy.array([
            [0.0571041961, 0.06546699455602246],
            [0.2768430136, 0.05021012321401679],
            [0.5835904324, 0.02891208422223085],
            [0.8602401357, 0.009703785123906346],
            [0.0571041961, 0.3111645522491480],
            [0.2768430136, 0.2386486597440242],
            [0.5835904324, 0.1374191041243166],
            [0.8602401357, 0.04612207989200404],
            [0.0571041961, 0.6317312516508520],
            [0.2768430136, 0.4845083266559759],
            [0.5835904324, 0.2789904634756834],
            [0.8602401357, 0.09363778440799593],
            [0.0571041961, 0.8774288093439775],
            [0.2768430136, 0.6729468631859832],
            [0.5835904324, 0.3874974833777692],
            [0.8602401357, 0.1300560791760936],
            ])

        self.degree = 7
        return


class Gauss8x8(object):
    '''
    Essentially a product of two 8 point 1D Gauss-Legendre rules.
    https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
    '''
    def __init__(self):
        self.weights = [
            0.3335674062677772E-03,
            0.7327880811491046E-03,
            0.1033723454167925E-02,
            0.1195112498415193E-02,
            0.1195112498415193E-02,
            0.1033723454167925E-02,
            0.7327880811491046E-03,
            0.3335674062677772E-03,
            0.1806210919443461E-02,
            0.3967923151181667E-02,
            0.5597437146194232E-02,
            0.6471331443180639E-02,
            0.6471331443180639E-02,
            0.5597437146194232E-02,
            0.3967923151181667E-02,
            0.1806210919443461E-02,
            0.4599755803015752E-02,
            0.1010484287526739E-01,
            0.1425461651131868E-01,
            0.1648010431039818E-01,
            0.1648010431039818E-01,
            0.1425461651131868E-01,
            0.1010484287526739E-01,
            0.4599755803015752E-02,
            0.8017259531156730E-02,
            0.1761248886287915E-01,
            0.2484544071087993E-01,
            0.2872441038508419E-01,
            0.2872441038508419E-01,
            0.2484544071087993E-01,
            0.1761248886287915E-01,
            0.8017259531156730E-02,
            0.1073501897357062E-01,
            0.2358292149331603E-01,
            0.3326776143412911E-01,
            0.3846165753898425E-01,
            0.3846165753898425E-01,
            0.3326776143412911E-01,
            0.2358292149331603E-01,
            0.1073501897357062E-01,
            0.1138879740452669E-01,
            0.2501915606814251E-01,
            0.3529381699354388E-01,
            0.4080402900378691E-01,
            0.4080402900378691E-01,
            0.3529381699354388E-01,
            0.2501915606814251E-01,
            0.1138879740452669E-01,
            0.9223845391285393E-02,
            0.2026314273544469E-01,
            0.2858464328177232E-01,
            0.3304739223149761E-01,
            0.3304739223149761E-01,
            0.2858464328177232E-01,
            0.2026314273544469E-01,
            0.9223845391285393E-02,
            0.4509812715921713E-02,
            0.9907253959306707E-02,
            0.1397588340693756E-01,
            0.1615785427783403E-01,
            0.1615785427783403E-01,
            0.1397588340693756E-01,
            0.9907253959306707E-02,
            0.4509812715921713E-02,
            ]

        self.points = numpy.array([
            [0.9553660447100000, 0.8862103848242247E-03],
            [0.9553660447100000, 0.4537789678039195E-02],
            [0.9553660447100000, 0.1058868260117431E-01],
            [0.9553660447100000, 0.1822327082910602E-01],
            [0.9553660447100000, 0.2641068446089399E-01],
            [0.9553660447100000, 0.3404527268882569E-01],
            [0.9553660447100000, 0.4009616561196080E-01],
            [0.9553660447100000, 0.4374774490517578E-01],
            [0.8556337429600001, 0.2866402391985981E-02],
            [0.8556337429600001, 0.1467724979327651E-01],
            [0.8556337429600001, 0.3424855503358430E-01],
            [0.8556337429600001, 0.5894224214571626E-01],
            [0.8556337429600001, 0.8542401489428375E-01],
            [0.8556337429600001, 0.1101177020064157],
            [0.8556337429600001, 0.1296890072467235],
            [0.8556337429600001, 0.1414998546480140],
            [0.7131752428600000, 0.5694926133044352E-02],
            [0.7131752428600000, 0.2916054411712861E-01],
            [0.7131752428600000, 0.6804452564827500E-01],
            [0.7131752428600000, 0.1171055801775613],
            [0.7131752428600000, 0.1697191769624387],
            [0.7131752428600000, 0.2187802314917250],
            [0.7131752428600000, 0.2576642130228714],
            [0.7131752428600000, 0.2811298310069557],
            [0.5451866848000000, 0.9030351006711630E-02],
            [0.5451866848000000, 0.4623939674940125E-01],
            [0.5451866848000000, 0.1078970888004545],
            [0.5451866848000000, 0.1856923986620134],
            [0.5451866848000000, 0.2691209165379867],
            [0.5451866848000000, 0.3469162263995455],
            [0.5451866848000000, 0.4085739184505988],
            [0.5451866848000000, 0.4457829641932884],
            [0.3719321645800000, 0.1247033193690498E-01],
            [0.3719321645800000, 0.6385362269957356E-01],
            [0.3719321645800000, 0.1489989161403976],
            [0.3719321645800000, 0.2564292182833579],
            [0.3719321645800000, 0.3716386171366422],
            [0.3719321645800000, 0.4790689192796024],
            [0.3719321645800000, 0.5642142127204264],
            [0.3719321645800000, 0.6155975034830951],
            [0.2143084794000000, 0.1559996151584746E-01],
            [0.2143084794000000, 0.7987871227492103E-01],
            [0.2143084794000000, 0.1863925811641285],
            [0.2143084794000000, 0.3207842387034378],
            [0.2143084794000000, 0.4649072818965623],
            [0.2143084794000000, 0.5992989394358715],
            [0.2143084794000000, 0.7058128083250790],
            [0.2143084794000000, 0.7700915590841526],
            [0.9132360790000005E-01, 0.1804183496379599E-01],
            [0.9132360790000005E-01, 0.9238218584838476E-01],
            [0.9132360790000005E-01, 0.2155687489628060],
            [0.9132360790000005E-01, 0.3709968314854498],
            [0.9132360790000005E-01, 0.5376795606145502],
            [0.9132360790000005E-01, 0.6931076431371940],
            [0.9132360790000005E-01, 0.8162942062516152],
            [0.9132360790000005E-01, 0.8906345571362040],
            [0.1777991514999999E-01, 0.1950205026019779E-01],
            [0.1777991514999999E-01, 0.9985913490381848E-01],
            [0.1777991514999999E-01, 0.2330157982952792],
            [0.1777991514999999E-01, 0.4010234473667467],
            [0.1777991514999999E-01, 0.5811966374832533],
            [0.1777991514999999E-01, 0.7492042865547208],
            [0.1777991514999999E-01, 0.8823609499461815],
            [0.1777991514999999E-01, 0.9627180345898023],
            ])

        self.degree = 15
        return
